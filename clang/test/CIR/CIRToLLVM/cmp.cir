// RUN: cir-tool %s -cir-to-func -cir-to-memref -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-tool %s -cir-to-func -cir-to-memref -cir-to-llvm -o - | mlir-translate -mlir-to-llvmir | FileCheck %s -check-prefix=LLVM

// FIXME: after rebasing against July's 2022, this started failing with "integer type not supported in CIR yet"
// XFAIL: *

module {
  cir.func @foo() {
    %0 = cir.alloca i32, cir.ptr <i32>, ["a", uninitialized] {alignment = 4 : i64}
    %1 = cir.alloca i32, cir.ptr <i32>, ["b", uninitialized] {alignment = 4 : i64}
    %2 = cir.alloca f32, cir.ptr <f32>, ["c", uninitialized] {alignment = 4 : i64}
    %3 = cir.alloca f32, cir.ptr <f32>, ["d", uninitialized] {alignment = 4 : i64}
    %4 = cir.alloca !cir.bool, cir.ptr <!cir.bool>, ["e", uninitialized] {alignment = 1 : i64}
    %5 = cir.load %0 : cir.ptr <i32>, i32
    %6 = cir.load %1 : cir.ptr <i32>, i32
    %7 = cir.cmp(gt, %5, %6) : i32, !cir.bool
    %8 = cir.load %0 : cir.ptr <i32>, i32
    %9 = cir.load %1 : cir.ptr <i32>, i32
    %10 = cir.cmp(eq, %8, %9) : i32, !cir.bool
    %11 = cir.load %0 : cir.ptr <i32>, i32
    %12 = cir.load %1 : cir.ptr <i32>, i32
    %13 = cir.cmp(lt, %11, %12) : i32, !cir.bool
    %14 = cir.load %0 : cir.ptr <i32>, i32
    %15 = cir.load %1 : cir.ptr <i32>, i32
    %16 = cir.cmp(ge, %14, %15) : i32, !cir.bool
    %17 = cir.load %0 : cir.ptr <i32>, i32
    %18 = cir.load %1 : cir.ptr <i32>, i32
    %19 = cir.cmp(ne, %17, %18) : i32, !cir.bool
    %20 = cir.load %0 : cir.ptr <i32>, i32
    %21 = cir.load %1 : cir.ptr <i32>, i32
    %22 = cir.cmp(le, %20, %21) : i32, !cir.bool
    %23 = cir.load %2 : cir.ptr <f32>, f32
    %24 = cir.load %3 : cir.ptr <f32>, f32
    %25 = cir.cmp(gt, %23, %24) : f32, !cir.bool
    %26 = cir.load %2 : cir.ptr <f32>, f32
    %27 = cir.load %3 : cir.ptr <f32>, f32
    %28 = cir.cmp(eq, %26, %27) : f32, !cir.bool
    %29 = cir.load %2 : cir.ptr <f32>, f32
    %30 = cir.load %3 : cir.ptr <f32>, f32
    %31 = cir.cmp(lt, %29, %30) : f32, !cir.bool
    %32 = cir.load %2 : cir.ptr <f32>, f32
    %33 = cir.load %3 : cir.ptr <f32>, f32
    %34 = cir.cmp(ge, %32, %33) : f32, !cir.bool
    %35 = cir.load %2 : cir.ptr <f32>, f32
    %36 = cir.load %3 : cir.ptr <f32>, f32
    %37 = cir.cmp(ne, %35, %36) : f32, !cir.bool
    %38 = cir.load %2 : cir.ptr <f32>, f32
    %39 = cir.load %3 : cir.ptr <f32>, f32
    %40 = cir.cmp(le, %38, %39) : f32, !cir.bool
    cir.return
  }
}

// MLIR: = arith.cmpi ugt
// MLIR: = arith.cmpi eq,
// MLIR: = arith.cmpi ult,
// MLIR: = arith.cmpi uge,
// MLIR: = arith.cmpi ne,
// MLIR: = arith.cmpi ule,
// MLIR: = arith.cmpf ugt
// MLIR: = arith.cmpf ueq,
// MLIR: = arith.cmpf ult,
// MLIR: = arith.cmpf uge,
// MLIR: = arith.cmpf une,
// MLIR: = arith.cmpf ule,

// LLVM: icmp ugt i32
// LLVM: icmp eq i32
// LLVM: icmp ult i32
// LLVM: icmp uge i32
// LLVM: icmp ne i32
// LLVM: icmp ule i32
// LLVM: fcmp ugt float
// LLVM: fcmp ueq float
// LLVM: fcmp ult float
// LLVM: fcmp uge float
// LLVM: fcmp une float
// LLVM: fcmp ule float
