// RUN: cir-tool %s -cir-to-func -cir-to-memref -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-tool %s -cir-to-func -cir-to-memref -cir-to-llvm -o - | mlir-translate -mlir-to-llvmir | FileCheck %s -check-prefix=LLVM
// XFAIL: *

module {
  cir.func @foo() {
    %0 = cir.alloca i32, cir.ptr <i32>, ["a", init] {alignment = 4 : i64}
    %1 = cir.alloca i32, cir.ptr <i32>, ["b", init] {alignment = 4 : i64}
    %2 = cir.cst(2 : i32) : i32
    cir.store %2, %0 : i32, cir.ptr <i32>
    cir.store %2, %1 : i32, cir.ptr <i32>

    %3 = cir.load %0 : cir.ptr <i32>, i32
    %4 = cir.unary(inc, %3) : i32, i32
    cir.store %4, %0 : i32, cir.ptr <i32>

    %5 = cir.load %1 : cir.ptr <i32>, i32
    %6 = cir.unary(dec, %5) : i32, i32
    cir.store %6, %1 : i32, cir.ptr <i32>
    cir.return
  }
}

// MLIR: = arith.constant 1
// MLIR: = arith.addi
// MLIR: = arith.constant 1
// MLIR: = arith.subi

// LLVM: = add i32 %[[#]], 1
// LLVM: = sub i32 %[[#]], 1
