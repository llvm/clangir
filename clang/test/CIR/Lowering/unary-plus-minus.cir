// RUN: cir-tool %s -cir-to-llvm -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-tool %s -cir-to-llvm -o - | mlir-translate -mlir-to-llvmir -allow-unregistered-dialect | FileCheck %s -check-prefix=LLVM
!s32i = !cir.int<s, 32>
module {
  cir.func @foo() {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["a", init] {alignment = 4 : i64}
    %1 = cir.alloca !s32i, cir.ptr <!s32i>, ["b", init] {alignment = 4 : i64}
    %2 = cir.const(#cir.int<2> : !s32i) : !s32i
    cir.store %2, %0 : !s32i, cir.ptr <!s32i>
    cir.store %2, %1 : !s32i, cir.ptr <!s32i>

    %3 = cir.load %0 : cir.ptr <!s32i>, !s32i
    %4 = cir.unary(plus, %3) : !s32i, !s32i
    cir.store %4, %0 : !s32i, cir.ptr <!s32i>

    %5 = cir.load %1 : cir.ptr <!s32i>, !s32i
    %6 = cir.unary(minus, %5) : !s32i, !s32i
    cir.store %6, %1 : !s32i, cir.ptr <!s32i>
    cir.return
  }

// MLIR: %[[#INPUT_PLUS:]] = llvm.load
// MLIR: llvm.store %[[#INPUT_PLUS]]
// MLIR: %[[#INPUT_MINUS:]] = llvm.load
// MLIR: %[[ZERO:[a-z0-9_]+]] = llvm.mlir.constant(0 : i32)
// MLIR: llvm.sub %[[ZERO]], %[[#INPUT_MINUS]]

// LLVM: = sub i32 0, %[[#]]


  cir.func @floatingPoints(%arg0: f64) {
  // MLIR: llvm.func @floatingPoints(%arg0: f64)
    %0 = cir.alloca f64, cir.ptr <f64>, ["X", init] {alignment = 8 : i64}
    cir.store %arg0, %0 : f64, cir.ptr <f64>
    %1 = cir.load %0 : cir.ptr <f64>, f64
    %2 = cir.unary(plus, %1) : f64, f64
    // MLIR: llvm.store %arg0, %[[#F_PLUS:]] : f64, !llvm.ptr
    // MLIR: %{{[0-9]}} = llvm.load %[[#F_PLUS]] : !llvm.ptr
    %3 = cir.load %0 : cir.ptr <f64>, f64
    %4 = cir.unary(minus, %3) : f64, f64
    // MLIR: %[[#F_MINUS:]] = llvm.load %{{[0-9]}} : !llvm.ptr
    // MLIR: %[[#F_NEG_ONE:]] = llvm.mlir.constant(-1.000000e+00 : f64) : f64
    // MLIR: %5 = llvm.fmul %[[#F_NEG_ONE]], %[[#F_MINUS]]  : f64
    cir.return
  }
}
