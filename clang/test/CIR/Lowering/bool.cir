// RUN: cir-opt %s -cir-to-llvm -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-translate %s -cir-to-llvmir  | FileCheck %s -check-prefix=LLVM

#false = #cir.bool<false> : !cir.bool
#true = #cir.bool<true> : !cir.bool

module {
  cir.global external @g_bl = #false
// MLIR: llvm.mlir.global external @g_bl(false) {addr_space = 0 : i32} : i8
// LLVM: @g_bl = global i8 0

  cir.func @foo() {
    %1 = cir.const(#true) : !cir.bool
    %0 = cir.alloca !cir.bool, !cir.ptr<!cir.bool>, ["a", init] {alignment = 1 : i64}
    cir.store %1, %0 : !cir.bool, !cir.ptr<!cir.bool>
    cir.return
  }
//      MLIR: llvm.func @foo()
//  MLIR-DAG: = llvm.mlir.constant(1 : i8) : i8
//  MLIR-DAG: [[Value:%[a-z0-9]+]] = llvm.mlir.constant(1 : index) : i64
//  MLIR-DAG: = llvm.alloca [[Value]] x i8 {alignment = 1 : i64} : (i64) -> !llvm.ptr
//  MLIR-DAG: llvm.store %0, %2 : i8, !llvm.ptr
// MLIR-NEXT: llvm.return

//      LLVM: define void @foo()
// LLVM-NEXT:   %1 = alloca i8, i64 1, align 1
// LLVM-NEXT:   store i8 1, ptr %1, align 1
// LLVM-NEXT:   ret void
}
