// RUN: cir-tool %s -cir-to-llvm -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-tool %s -cir-to-llvm -o - | mlir-translate -mlir-to-llvmir | FileCheck %s -check-prefix=LLVM
!s32i = !cir.int<s, 32>
module {
    cir.func @foo() -> !s32i  {
        %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["__retval"] {alignment = 4 : i64}
        %1 = cir.alloca !s32i, cir.ptr <!s32i>, ["a", init] {alignment = 4 : i64}
        %2 = cir.const(#cir.int<1> : !s32i) : !s32i
        cir.store %2, %1 : !s32i, cir.ptr <!s32i>
        %3 = cir.load %1 : cir.ptr <!s32i>, !s32i
        %4 = cir.unary(not, %3) : !s32i, !s32i
        cir.store %4, %0 : !s32i, cir.ptr <!s32i>
        %5 = cir.load %0 : cir.ptr <!s32i>, !s32i
        cir.return %5 : !s32i
    }
}

// MLIR: = llvm.load
// MLIR: = llvm.mlir.constant(-1 : i32)
// MLIR: = llvm.xor

// LLVM: = xor i32 -1, %[[#]]
