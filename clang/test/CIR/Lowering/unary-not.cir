// RUN: cir-opt %s -cir-to-llvm -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-translate %s -cir-to-llvmir  | FileCheck %s -check-prefix=LLVM
!s32i = !cir.int<s, 32>
module {
    cir.func @foo() -> !s32i  {
        %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64}
        %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["a", init] {alignment = 4 : i64}
        %2 = cir.const #cir.int<1> : !s32i
        cir.store %2, %1 : !s32i, !cir.ptr<!s32i>
        %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i
        %4 = cir.unary(not, %3) : !s32i, !s32i
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i>
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i
        cir.return %5 : !s32i
    }

// MLIR: = llvm.load
// MLIR: = llvm.mlir.constant(-1 : i32)
// MLIR: = llvm.xor

// LLVM: = xor i32 -1, %[[#]]


    cir.func @floatingPoint(%arg0: !cir.float, %arg1: !cir.double) {
        // MLIR: llvm.func @floatingPoint
        %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["f", init] {alignment = 4 : i64}
        %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["d", init] {alignment = 8 : i64}
        %2 = cir.alloca !cir.bool, !cir.ptr<!cir.bool>, ["tmp1"] {alignment = 1 : i64}
        %3 = cir.alloca !cir.bool, !cir.ptr<!cir.bool>, ["tmp2"] {alignment = 1 : i64}
        %4 = cir.alloca !cir.bool, !cir.ptr<!cir.bool>, ["tmp3"] {alignment = 1 : i64}
        %5 = cir.alloca !cir.bool, !cir.ptr<!cir.bool>, ["tmp4"] {alignment = 1 : i64}

        cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float>
        cir.store %arg1, %1 : !cir.double, !cir.ptr<!cir.double>
        
        %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float
        %7 = cir.cast(float_to_bool, %6 : !cir.float), !cir.bool
        cir.store %7, %2 : !cir.bool, !cir.ptr<!cir.bool>
        // MLIR: %[[#F_ZERO:]] = llvm.mlir.constant(0.000000e+00 : f32) : f32
        // MLIR: %[[#F_BOOL:]] = llvm.fcmp "une" %{{.+}}, %[[#F_ZERO]] : f32
        // MLIR: %[[#F_ZEXT:]] = llvm.zext %[[#F_BOOL]] : i1 to i8
        
        %8 = cir.unary(not, %7) : !cir.bool, !cir.bool
        cir.store %8, %3 : !cir.bool, !cir.ptr<!cir.bool>
        // MLIR: %[[#F_ONE:]] = llvm.mlir.constant(1 : i8) : i8
        // MLIR: = llvm.xor %[[#F_ZEXT]], %[[#F_ONE]]  : i8
        
        %9 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double
        %10 = cir.cast(float_to_bool, %9 : !cir.double), !cir.bool
        cir.store %10, %4 : !cir.bool, !cir.ptr<!cir.bool>
        // MLIR: %[[#D_ZERO:]] = llvm.mlir.constant(0.000000e+00 : f64) : f64
        // MLIR: %[[#D_BOOL:]] = llvm.fcmp "une" %{{.+}}, %[[#D_ZERO]] : f64
        // MLIR: %[[#D_ZEXT:]] = llvm.zext %[[#D_BOOL]] : i1 to i8
        
        %11 = cir.unary(not, %10) : !cir.bool, !cir.bool
        cir.store %11, %5 : !cir.bool, !cir.ptr<!cir.bool>
        // MLIR: %[[#D_ONE:]] = llvm.mlir.constant(1 : i8) : i8
        // MLIR: = llvm.xor %[[#D_ZEXT]], %[[#D_ONE]]  : i8
        
        cir.return
    }

    cir.func @CStyleValueNegation(%arg0: !s32i, %arg1: !cir.float) {
        // MLIR: llvm.func @CStyleValueNegation
        %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64}
        %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["f", init] {alignment = 4 : i64}
        %2 = cir.alloca !cir.bool, !cir.ptr<!cir.bool>, ["tmp1"] {alignment = 1 : i64}
        %3 = cir.alloca !cir.bool, !cir.ptr<!cir.bool>, ["tmp2"] {alignment = 1 : i64}
        %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["tmp3"] {alignment = 4 : i64}
        %5 = cir.alloca !cir.bool, !cir.ptr<!cir.bool>, ["tmp4"] {alignment = 1 : i64}
        %6 = cir.alloca !cir.bool, !cir.ptr<!cir.bool>, ["tmp5"] {alignment = 1 : i64}
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["tmp6"] {alignment = 4 : i64}

        cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i>
        cir.store %arg1, %1 : !cir.float, !cir.ptr<!cir.float>

        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool
        cir.store %9, %2 : !cir.bool, !cir.ptr<!cir.bool>
        
        %10 = cir.unary(not, %9) : !cir.bool, !cir.bool
        cir.store %10, %3 : !cir.bool, !cir.ptr<!cir.bool>
        
        %11 = cir.cast(bool_to_int, %10 : !cir.bool), !s32i
        cir.store %11, %4 : !s32i, !cir.ptr<!s32i>
        // MLIR: %[[#INT:]] = llvm.load %{{.+}} : !llvm.ptr
        // MLIR: %[[#IZERO:]] = llvm.mlir.constant(0 : i32) : i32
        // MLIR: %[[#ICMP:]] = llvm.icmp "ne" %[[#INT]], %[[#IZERO]] : i32
        // MLIR: %[[#IEXT:]] = llvm.zext %[[#ICMP]] : i1 to i8
        // MLIR: %[[#IONE:]] = llvm.mlir.constant(1 : i8) : i8
        // MLIR: %[[#IXOR:]] = llvm.xor %[[#IEXT]], %[[#IONE]]  : i8
        // MLIR: = llvm.zext %[[#IXOR]] : i8 to i32

        %12 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float
        %13 = cir.cast(float_to_bool, %12 : !cir.float), !cir.bool
        cir.store %13, %5 : !cir.bool, !cir.ptr<!cir.bool>
        
        %14 = cir.unary(not, %13) : !cir.bool, !cir.bool
        cir.store %14, %6 : !cir.bool, !cir.ptr<!cir.bool>
        
        %15 = cir.cast(bool_to_int, %14 : !cir.bool), !s32i
        cir.store %15, %7 : !s32i, !cir.ptr<!s32i>
        // MLIR: %[[#FLOAT:]] = llvm.load %{{.+}} : !llvm.ptr
        // MLIR: %[[#FZERO:]] = llvm.mlir.constant(0.000000e+00 : f32) : f32
        // MLIR: %[[#FCMP:]] = llvm.fcmp "une" %[[#FLOAT]], %[[#FZERO]] : f32
        // MLIR: %[[#FEXT:]] = llvm.zext %[[#FCMP]] : i1 to i8
        // MLIR: %[[#FONE:]] = llvm.mlir.constant(1 : i8) : i8
        // MLIR: %[[#FXOR:]] = llvm.xor %[[#FEXT]], %[[#FONE]]  : i8
        // MLIR: = llvm.zext %[[#FXOR]] : i8 to i32

        cir.return
    }
}
