// RUN: cir-tool %s -cir-to-llvm -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-tool %s -cir-to-llvm -o - | mlir-translate -mlir-to-llvmir | FileCheck %s -check-prefix=LLVM

module {
    cir.func @foo() -> i32  {
        %0 = cir.alloca i32, cir.ptr <i32>, ["__retval"] {alignment = 4 : i64}
        %1 = cir.alloca i32, cir.ptr <i32>, ["a", init] {alignment = 4 : i64}
        %2 = cir.cst(1 : i32) : i32
        cir.store %2, %1 : i32, cir.ptr <i32>
        %3 = cir.load %1 : cir.ptr <i32>, i32
        %4 = cir.unary(not, %3) : i32, i32
        cir.store %4, %0 : i32, cir.ptr <i32>
        %5 = cir.load %0 : cir.ptr <i32>, i32
        cir.return %5 : i32
    }
}

// MLIR: = llvm.load
// MLIR: = llvm.mlir.constant(-1 : i32)
// MLIR: = llvm.xor

// LLVM: = xor i32 -1, %[[#]]
