// RUN: cir-opt %s -cir-to-llvm -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-translate %s -cir-to-llvmir  | FileCheck %s -check-prefix=LLVM
!s32i = !cir.int<s, 32>
module {
  cir.func @foo() {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["a", init] {alignment = 4 : i64}
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["b", init] {alignment = 4 : i64}
    %2 = cir.const(#cir.int<2> : !s32i) : !s32i
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i>
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i>

    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i
    %4 = cir.unary(inc, %3) : !s32i, !s32i
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i>

    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i
    %6 = cir.unary(dec, %5) : !s32i, !s32i
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i>
    cir.return
  }

// MLIR: = llvm.mlir.constant(1 : i32)
// MLIR: = llvm.add
// MLIR: = llvm.mlir.constant(1 : i32)
// MLIR: = llvm.sub

// LLVM: = add i32 %[[#]], 1
// LLVM: = sub i32 %[[#]], 1

  cir.func @floatingPoint(%arg0: !cir.float, %arg1: !cir.double) {
  // MLIR: llvm.func @floatingPoint
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["f", init] {alignment = 4 : i64}
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["d", init] {alignment = 8 : i64}
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float>
    cir.store %arg1, %1 : !cir.double, !cir.ptr<!cir.double>

    %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float
    %3 = cir.unary(inc, %2) : !cir.float, !cir.float
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float>
    // MLIR: %[[#F_ONE:]] = llvm.mlir.constant(1.000000e+00 : f32) : f32
    // MLIR: = llvm.fadd %[[#F_ONE]], %{{[0-9]+}}  : f32

    %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float
    %5 = cir.unary(dec, %4) : !cir.float, !cir.float
    cir.store %5, %0 : !cir.float, !cir.ptr<!cir.float>
    // MLIR: %[[#D_ONE:]] = llvm.mlir.constant(-1.000000e+00 : f32) : f32
    // MLIR: = llvm.fsub %[[#D_ONE]], %{{[0-9]+}}  : f32

    %6 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double
    %7 = cir.unary(inc, %6) : !cir.double, !cir.double
    cir.store %7, %1 : !cir.double, !cir.ptr<!cir.double>
    // MLIR: %[[#D_ONE:]] = llvm.mlir.constant(1.000000e+00 : f64) : f64
    // MLIR: = llvm.fadd %[[#D_ONE]], %{{[0-9]+}}  : f64

    %8 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double
    %9 = cir.unary(dec, %8) : !cir.double, !cir.double
    cir.store %9, %1 : !cir.double, !cir.ptr<!cir.double>
    // MLIR: %[[#D_ONE:]] = llvm.mlir.constant(-1.000000e+00 : f64) : f64
    // MLIR: = llvm.fsub %[[#D_ONE]], %{{[0-9]+}}  : f64

    cir.return
  }
}
