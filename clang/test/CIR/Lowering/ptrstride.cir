// RUN: cir-opt %s -cir-to-llvm -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-translate %s -cir-to-llvmir  | FileCheck %s -check-prefix=LLVM
!s32i = !cir.int<s, 32>
module {
  cir.func @f(%arg0: !cir.ptr<!s32i>) {
    %0 = cir.alloca !cir.ptr<!s32i>, cir.ptr <!cir.ptr<!s32i>>, ["a", init] {alignment = 8 : i64}
    cir.store %arg0, %0 : !cir.ptr<!s32i>, cir.ptr <!cir.ptr<!s32i>>
    %1 = cir.load %0 : cir.ptr <!cir.ptr<!s32i>>, !cir.ptr<!s32i>
    %2 = cir.const(#cir.int<1> : !s32i) : !s32i
    %3 = cir.ptr_stride(%1 : !cir.ptr<!s32i>, %2 : !s32i), !cir.ptr<!s32i>
    %4 = cir.load %3 : cir.ptr <!s32i>, !s32i
    cir.return
  }
}

//      MLIR: module {
// MLIR-NEXT:   llvm.func @f(%arg0: !llvm.ptr)
// MLIR-NEXT:     %0 = llvm.mlir.constant(1 : index) : i64
// MLIR-NEXT:     %1 = llvm.alloca %0 x !llvm.ptr {alignment = 8 : i64} : (i64) -> !llvm.ptr
// MLIR-NEXT:     llvm.store %arg0, %1 : !llvm.ptr, !llvm.ptr
// MLIR-NEXT:     %2 = llvm.load %1 : !llvm.ptr
// MLIR-NEXT:     %3 = llvm.mlir.constant(1 : i32) : i32
// MLIR-NEXT:     %4 = llvm.getelementptr %2[%3] : (!llvm.ptr, i32) -> !llvm.ptr
// MLIR-NEXT:     %5 = llvm.load %4 : !llvm.ptr
// MLIR-NEXT:     llvm.return
// MLIR-NEXT:   }
// MLIR-NEXT: }

//      LLVM: define void @f(ptr %0)
// LLVM-NEXT:   %2 = alloca ptr, i64 1, align 8
// LLVM-NEXT:   store ptr %0, ptr %2, align 8
// LLVM-NEXT:   %3 = load ptr, ptr %2, align 8
// LLVM-NEXT:   %4 = getelementptr i32, ptr %3, i32 1
// LLVM-NEXT:   %5 = load i32, ptr %4, align 4
// LLVM-NEXT:   ret void
// LLVM-NEXT: }
