// RUN: cir-opt %s -cir-to-llvm -o %t.mlir
// RUN: FileCheck %s --input-file=%t.mlir -check-prefix=MLIR

!s32i = !cir.int<s, 32>
module {
  cir.func @f(%arg0: !cir.ptr<!s32i>) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["a", init] {alignment = 8 : i64}
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i>
    %2 = cir.const #cir.int<1> : !s32i
    %3 = cir.ptr_stride(%1 : !cir.ptr<!s32i>, %2 : !s32i), !cir.ptr<!s32i>
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i
    cir.return
  }
}

// MLIR-LABEL: @f
// MLIR:   %[[VAL_1:.*]] = llvm.mlir.constant(1 : index) : i64
// MLIR:   %[[VAL_2:.*]] = llvm.alloca %[[VAL_1]] x !llvm.ptr {alignment = 8 : i64} : (i64) -> !llvm.ptr
// MLIR:   llvm.store {{.*}}, %[[VAL_2]] : !llvm.ptr, !llvm.ptr
// MLIR:   %[[VAL_3:.*]] = llvm.load %[[VAL_2]] : !llvm.ptr -> !llvm.ptr
// MLIR:   %[[VAL_4:.*]] = llvm.mlir.constant(1 : i32) : i32
// MLIR:   %[[VAL_5:.*]] = llvm.sext %[[VAL_4]] : i32 to i64
// MLIR:   %[[VAL_6:.*]] = llvm.getelementptr %[[VAL_3]]{{\[}}%[[VAL_5]]] : (!llvm.ptr, i64) -> !llvm.ptr, i32
// MLIR:   %[[VAL_7:.*]] = llvm.load %[[VAL_6]] : !llvm.ptr -> i32
// MLIR:   llvm.return
