// RUN: cir-tool %s -cir-to-llvm -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-tool %s -cir-to-llvm -o - | mlir-translate -mlir-to-llvmir | FileCheck %s -check-prefix=LLVM

module {
  cir.func @foo(%arg0: i32) -> i32 {
    %4 = cir.cast(int_to_bool, %arg0 : i32), !cir.bool
    cir.return %arg0 : i32
  }
}

//      MLIR: module {
// MLIR-NEXT:  llvm.func @foo(%arg0: i32) -> i32 {
// MLIR-NEXT:    [[v0:%[0-9]]] = llvm.mlir.constant(0 : i32) : i32
// MLIR-NEXT:    [[v1:%[0-9]]] = llvm.icmp "ne" %arg0, %0 : i32
// MLIR-NEXT:    llvm.return %arg0 : i32
// MLIR-NEXT:  }
// MLIR-NEXT:}


//      LLVM: define i32 @foo(i32 %0) {
// LLVM-NEXT:   %2 = icmp ne i32 %0, 0
// LLVM-NEXT:   ret i32 %0
// LLVM-NEXT: }
