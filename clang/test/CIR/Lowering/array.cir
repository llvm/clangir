// RUN: cir-tool %s -cir-to-llvm -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-tool %s -cir-to-llvm -o - | mlir-translate -mlir-to-llvmir | FileCheck %s -check-prefix=LLVM

module {
  cir.func @foo() {
    %0 = cir.alloca !cir.array<i32 x 10>, cir.ptr <!cir.array<i32 x 10>>, ["a"] {alignment = 16 : i64}
    cir.return
  }
}

//      MLIR: module {
// MLIR-NEXT: func @foo() {
// MLIR-NEXT:  %0 = llvm.mlir.constant(1 : index) : i64
// MLIR-NEXT:  %1 = llvm.alloca %0 x !llvm.array<10 x i32> {alignment = 16 : i64} : (i64) -> !llvm.ptr
// MLIR-NEXT:    llvm.return
// MLIR-NEXT:  }
// MLIR-NEXT: }

//      LLVM: %1 = alloca [10 x i32], i64 1, align 16
// LLVM-NEXT: ret void
