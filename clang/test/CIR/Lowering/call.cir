// RUN: cir-tool %s -cir-to-llvm -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-tool %s -cir-to-llvm -o - | mlir-translate -mlir-to-llvmir | FileCheck %s -check-prefix=LLVM

module {
  cir.func @a() {
    cir.return
  }
  cir.func @d() {
    cir.call @a() : () -> ()
    cir.return
  }

//      MLIR: llvm.func @a() {
// MLIR-NEXT:   llvm.return
// MLIR-NEXT: }
// MLIR-NEXT: llvm.func @d() {
// MLIR-NEXT:   llvm.call @a() : () -> ()
// MLIR-NEXT:   llvm.return
// MLIR-NEXT: }

//      LLVM: define void @a()
// LLVM-NEXT:   ret void
// LLVM-NEXT: }
//      LLVM: define void @d()
// LLVM-NEXT:   call void @a()
// LLVM-NEXT:   ret void
// LLVM-NEXT: }

  cir.func @callee(!cir.ptr<i32>) -> () attributes {sym_visibility = "private"}
  cir.func @caller(%arg0: !cir.ptr<i32>) -> () {
    cir.call @callee(%arg0) : (!cir.ptr<i32>) -> ()
    // MLIR: llvm.call @callee(%arg0) : (!llvm.ptr<i32>) -> ()
    cir.return
  }

} // end module
