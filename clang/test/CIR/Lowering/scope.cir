// RUN: cir-opt %s -cir-to-llvm -o %t.cir
// RUN: FileCheck %s --input-file=%t.cir -check-prefix=MLIR
// RUN: cir-translate %s -cir-to-llvmir  | FileCheck %s -check-prefix=LLVM
!u32i = !cir.int<u, 32>

module {
  cir.func @foo() {
    cir.scope {
      %0 = cir.alloca !u32i, cir.ptr <!u32i>, ["a", init] {alignment = 4 : i64}
      %1 = cir.const(#cir.int<4> : !u32i) : !u32i
      cir.store %1, %0 : !u32i, cir.ptr <!u32i>
    }
    cir.return
  }

//      MLIR: llvm.func @foo()
// MLIR-NEXT:   llvm.br ^bb1
// MLIR-NEXT: ^bb1:
//  MLIR-DAG:   [[v1:%[0-9]]] = llvm.mlir.constant(4 : i32) : i32
//  MLIR-DAG:   [[v2:%[0-9]]] = llvm.mlir.constant(1 : index) : i64
//  MLIR-DAG:   [[v3:%[0-9]]] = llvm.alloca [[v2]] x i32 {alignment = 4 : i64} : (i64) -> !llvm.ptr
// MLIR-NEXT:   llvm.store [[v1]], [[v3]] : i32, !llvm.ptr
// MLIR-NEXT:   llvm.br ^bb2
// MLIR-NEXT: ^bb2:
// MLIR-NEXT:   llvm.return


//      LLVM: define void @foo()
//  LLVM-NEXT:   br label %1
// LLVM-EMPTY:
//  LLVM-NEXT: 1:
//  LLVM-NEXT:   %2 = alloca i32, i64 1, align 4
//  LLVM-NEXT:   store i32 4, ptr %2, align 4
//  LLVM-NEXT:   br label %3
// LLVM-EMPTY:
//  LLVM-NEXT: 3:
//  LLVM-NEXT:   ret void
//  LLVM-NEXT: }


  // Should drop empty scopes.
  cir.func @empty_scope() {
    cir.scope {
    }
    cir.return
  }
  //      MLIR: llvm.func @empty_scope()
  // MLIR-NEXT:   llvm.return
  // MLIR-NEXT: }


  cir.func @scope_with_return() -> !u32i {
    %0 = cir.alloca !u32i, cir.ptr <!u32i>, ["__retval"] {alignment = 4 : i64}
    cir.scope {
      %2 = cir.const(#cir.int<0> : !u32i) : !u32i
      cir.store %2, %0 : !u32i, cir.ptr <!u32i>
      %3 = cir.load %0 : cir.ptr <!u32i>, !u32i
      cir.return %3 : !u32i
    }
    %1 = cir.load %0 : cir.ptr <!u32i>, !u32i
    cir.return %1 : !u32i
  }

  //      MLIR: llvm.func @scope_with_return()
  // MLIR-NEXT:  [[v0:%.*]] = llvm.mlir.constant(1 : index) : i64
  // MLIR-NEXT:  [[v1:%.*]] = llvm.alloca [[v0]] x i32 {alignment = 4 : i64} : (i64) -> !llvm.ptr
  // MLIR-NEXT:  llvm.br ^bb1
  // MLIR-NEXT: ^bb1:  // pred: ^bb0
  // MLIR-NEXT:  [[v2:%.*]] = llvm.mlir.constant(0 : i32) : i32
  // MLIR-NEXT:  llvm.store [[v2]], [[v1]] : i32, !llvm.ptr
  // MLIR-NEXT:  [[v3:%.*]] = llvm.load [[v1]] : !llvm.ptr -> i32
  // MLIR-NEXT:  llvm.return [[v3]] : i32
  // MLIR-NEXT: ^bb2:  // no predecessors
  // MLIR-NEXT:  [[v4:%.*]] = llvm.load [[v1]] : !llvm.ptr -> i32
  // MLIR-NEXT:  llvm.return [[v4]] : i32
  // MLIR-NEXT: }

  }
