// RUN: cir-opt %s -cir-to-llvm -reconcile-unrealized-casts -o %t.mlir
// RUN: FileCheck --input-file=%t.mlir %s

!s32i = !cir.int<s, 32>
module {
  cir.func @testFor() {
    cir.scope {
      %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64}
      %1 = cir.const #cir.int<1> : !s32i
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i>
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i
        %3 = cir.const #cir.int<10> : !s32i
        %4 = cir.cmp(lt, %2, %3) : !s32i, !s32i
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool
        cir.condition(%5)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i
            %3 = cir.const #cir.int<5> : !s32i
            %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i
            %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool
            cir.if %5 {
              cir.continue
            }
          }
        }
        cir.yield
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i
        %3 = cir.unary(inc, %2) : !s32i, !s32i
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i>
        cir.yield
      }
    }
    cir.return
  }

// CHECK:  llvm.func @testFor()
// CHECK:    llvm.br ^bb[[#COND:]]
// CHECK:  ^bb[[#COND]]:
// CHECK:    llvm.cond_br %8, ^bb[[#CONTINUE:]], ^bb[[#EXIT:]]
// CHECK:  ^bb[[#CONTINUE]]:
// CHECK:    llvm.cond_br %14, ^bb[[#preSTEP:]], ^bb[[#BODY:]]
// CHECK:  ^bb[[#preSTEP]]:
// CHECK:    llvm.br ^bb[[#STEP:]]
// CHECK:  ^bb[[#BODY]]:
// CHECK:    llvm.br ^bb[[#STEP:]]
// CHECK:  ^bb[[#STEP]]:
// CHECK:    llvm.br ^bb[[#COND:]]
// CHECK:  ^bb[[#EXIT]]:
// CHECK:    llvm.return
// CHECK:  }


  cir.func @testForNested() {
    cir.scope {
      %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64}
      %1 = cir.const #cir.int<1> : !s32i
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i>
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i
        %3 = cir.const #cir.int<10> : !s32i
        %4 = cir.cmp(lt, %2, %3) : !s32i, !s32i
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool
        cir.condition(%5)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j", init] {alignment = 4 : i64}
            %3 = cir.const #cir.int<1> : !s32i
            cir.store %3, %2 : !s32i, !cir.ptr<!s32i>
            cir.for : cond {
              %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i
              %5 = cir.const #cir.int<10> : !s32i
              %6 = cir.cmp(lt, %4, %5) : !s32i, !s32i
              %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool
              cir.condition(%7)
            } body {
              cir.scope {
                cir.scope {
                  %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i
                  %5 = cir.const #cir.int<5> : !s32i
                  %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i
                  %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool
                  cir.if %7 {
                    cir.continue
                  }
                }
              }
              cir.yield
            } step {
              %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i
              %5 = cir.unary(inc, %4) : !s32i, !s32i
              cir.store %5, %2 : !s32i, !cir.ptr<!s32i>
              cir.yield
            }
          }
        }
        cir.yield
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i
        %3 = cir.unary(inc, %2) : !s32i, !s32i
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i>
        cir.yield
      }
    }
    cir.return
  }

// CHECK:  llvm.func @testForNested()
// CHECK:    llvm.br ^bb[[#COND1:]]
// CHECK:  ^bb[[#COND1]]:
// CHECK:    llvm.cond_br %{{.+}}, ^bb[[#LOOP1BODY:]], ^bb[[#EXIT:]]
// CHECK:  ^bb[[#LOOP1BODY]]:
// CHECK:    llvm.br ^bb[[#COND2:]]
// CHECK:  ^bb[[#COND2]]:
// CHECK:    llvm.cond_br %{{.+}}, ^bb[[#LOOP2BODY:]], ^bb[[#LOOP1CONTINUE:]]
// CHECK:  ^bb[[#LOOP2BODY]]:
// CHECK:    llvm.cond_br %{{.+}}, ^bb[[#IFBODY1:]], ^bb[[#IFBODY2:]]
// CHECK:  ^bb[[#IFBODY1]]:
// CHECK:    llvm.br ^bb[[#STEP2:]]
// CHECK:  ^bb[[#IFBODY2]]:
// CHECK:    llvm.br ^bb[[#STEP2:]]
// CHECK:  ^bb[[#STEP2]]:
// CHECK:    llvm.br ^bb[[#COND2]]
// CHECK:  ^bb[[#LOOP1CONTINUE]]:
// CHECK:    llvm.br ^bb[[#COND1]]
// CHECK:  ^bb[[#EXIT]]:
// CHECK:    llvm.return
// CHECK:  }

cir.func @testWhile() {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64}
    %1 = cir.const #cir.int<0> : !s32i
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i>
    cir.scope {
      cir.while {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i
        %3 = cir.const #cir.int<10> : !s32i
        %4 = cir.cmp(lt, %2, %3) : !s32i, !s32i
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool
        cir.condition(%5)
      } do {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i
        %3 = cir.unary(inc, %2) : !s32i, !s32i
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i>
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i
          %5 = cir.const #cir.int<5> : !s32i
          %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool
          cir.if %7 {
            cir.continue
          }
        }
        cir.yield
      }
    }
    cir.return
  }

  // CHECK:  llvm.func @testWhile()
  //           [...]
  // CHECK:    llvm.cond_br %{{.+}}, ^bb[[#BODY:]], ^bb[[#EXIT:]]
  // CHECK:  ^bb[[#BODY]]:
  //           [...]
  // CHECK:    llvm.cond_br %{{.+}}, ^bb[[#preCOND0:]], ^bb[[#preCOND1:]]
  // CHECK:  ^bb[[#preCOND0]]:
  // CHECK:    llvm.br ^bb[[#COND]]
  // CHECK:  ^bb[[#preCOND1]]:
  // CHECK:    llvm.br ^bb[[#COND]]
  // CHECK:  ^bb[[#EXIT]]:
  //           [...]
  // CHECK:  }

  cir.func @testDoWhile() {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64}
    %1 = cir.const #cir.int<0> : !s32i
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i>
    cir.scope {
      cir.do {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i
        %3 = cir.unary(inc, %2) : !s32i, !s32i
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i>
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i
          %5 = cir.const #cir.int<5> : !s32i
          %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool
          cir.if %7 {
            cir.continue
          }
        }
        cir.yield
      } while {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i
        %3 = cir.const #cir.int<10> : !s32i
        %4 = cir.cmp(lt, %2, %3) : !s32i, !s32i
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool
        cir.condition(%5)
      }
    }
    cir.return
  }


  // CHECK:  llvm.func @testDoWhile()
  //           [...]
  // CHECK:    llvm.cond_br %{{.+}}, ^bb[[#BODY:]], ^bb[[#EXIT:]]
  // CHECK:  ^bb[[#BODY]]:
  //           [...]
  // CHECK:    llvm.cond_br %{{.+}}, ^bb[[#preCOND0:]], ^bb[[#preCOND1:]]
  // CHECK:  ^bb[[#preCOND0]]:
  // CHECK:    llvm.br ^bb[[#COND:]]
  // CHECK:  ^bb[[#preCOND1]]:
  // CHECK:    llvm.br ^bb[[#COND:]]
  // CHECK:  ^bb[[#EXIT]]:
  //           [...]
  // CHECK:  }

}