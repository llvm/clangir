// RUN: cir-opt %s -cir-to-llvm -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-translate %s -cir-to-llvmir  | FileCheck %s -check-prefix=LLVM

!s32i = !cir.int<s, 32>
module {
  cir.func @test(%arg0: !s32i) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["len", init] {alignment = 4 : i64}
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i>
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i
    %2 = cir.const(#cir.int<42> : !s32i) : !s32i
    %3 = cir.binop(sub, %1, %2) nsw : !s32i
    %4 = cir.binop(sub, %1, %2) nuw : !s32i
    %5 = cir.binop(sub, %1, %2) : !s32i
    cir.return
  }
}

// MLIR:      llvm.sub {{.*}}, {{.*}} overflow<nsw>  : i32
// MLIR-NEXT: llvm.sub {{.*}}, {{.*}} overflow<nuw>  : i32
// MLIR-NEXT: llvm.sub {{.*}}, {{.*}}  : i32

// LLVM:      sub nsw i32 {{.*}}, {{.*}}, !dbg !9
// LLVM-NEXT: sub nuw i32 {{.*}}, {{.*}}, !dbg !10
// LLVM-NEXT: sub i32 {{.*}}, {{.*}}, !dbg !11