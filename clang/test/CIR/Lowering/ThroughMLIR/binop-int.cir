// RUN: cir-tool %s -cir-to-mlir -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-tool %s -cir-to-mlir -cir-mlir-to-llvm -o - | mlir-translate -mlir-to-llvmir | FileCheck %s -check-prefix=LLVM

module {
  cir.func @foo() {
    %0 = cir.alloca i32, cir.ptr <i32>, ["a", init] {alignment = 4 : i64}
    %1 = cir.alloca i32, cir.ptr <i32>, ["b", init] {alignment = 4 : i64}
    %2 = cir.alloca i32, cir.ptr <i32>, ["x", init] {alignment = 4 : i64}
    %3 = cir.cst(2 : i32) : i32    cir.store %3, %0 : i32, cir.ptr <i32>
    %4 = cir.cst(1 : i32) : i32    cir.store %4, %1 : i32, cir.ptr <i32>
    %5 = cir.load %0 : cir.ptr <i32>, i32
    %6 = cir.load %1 : cir.ptr <i32>, i32
    %7 = cir.binop(mul, %5, %6) : i32
    cir.store %7, %2 : i32, cir.ptr <i32>
    %8 = cir.load %2 : cir.ptr <i32>, i32
    %9 = cir.load %1 : cir.ptr <i32>, i32
    %10 = cir.binop(div, %8, %9) : i32
    cir.store %10, %2 : i32, cir.ptr <i32>
    %11 = cir.load %2 : cir.ptr <i32>, i32
    %12 = cir.load %1 : cir.ptr <i32>, i32
    %13 = cir.binop(rem, %11, %12) : i32
    cir.store %13, %2 : i32, cir.ptr <i32>
    %14 = cir.load %2 : cir.ptr <i32>, i32
    %15 = cir.load %1 : cir.ptr <i32>, i32
    %16 = cir.binop(add, %14, %15) : i32
    cir.store %16, %2 : i32, cir.ptr <i32>
    %17 = cir.load %2 : cir.ptr <i32>, i32
    %18 = cir.load %1 : cir.ptr <i32>, i32
    %19 = cir.binop(sub, %17, %18) : i32
    cir.store %19, %2 : i32, cir.ptr <i32>
    %20 = cir.load %2 : cir.ptr <i32>, i32
    %21 = cir.load %1 : cir.ptr <i32>, i32
    %22 = cir.binop(shr, %20, %21) : i32
    cir.store %22, %2 : i32, cir.ptr <i32>
    %23 = cir.load %2 : cir.ptr <i32>, i32
    %24 = cir.load %1 : cir.ptr <i32>, i32
    %25 = cir.binop(shl, %23, %24) : i32
    cir.store %25, %2 : i32, cir.ptr <i32>
    %26 = cir.load %2 : cir.ptr <i32>, i32
    %27 = cir.load %1 : cir.ptr <i32>, i32
    %28 = cir.binop(and, %26, %27) : i32
    cir.store %28, %2 : i32, cir.ptr <i32>
    %29 = cir.load %2 : cir.ptr <i32>, i32
    %30 = cir.load %1 : cir.ptr <i32>, i32
    %31 = cir.binop(xor, %29, %30) : i32
    cir.store %31, %2 : i32, cir.ptr <i32>
    %32 = cir.load %2 : cir.ptr <i32>, i32
    %33 = cir.load %1 : cir.ptr <i32>, i32
    %34 = cir.binop(or, %32, %33) : i32
    cir.store %34, %2 : i32, cir.ptr <i32>
    cir.return
  }
}

// MLIR: = arith.muli
// MLIR: = arith.divsi
// MLIR: = arith.remsi
// MLIR: = arith.addi
// MLIR: = arith.subi
// MLIR: = arith.shrsi
// MLIR: = arith.shli
// MLIR: = arith.andi
// MLIR: = arith.xori
// MLIR: = arith.ori

// LLVM: = mul i32
// LLVM: = sdiv i32
// LLVM: = srem i32
// LLVM: = add i32
// LLVM: = sub i32
// LLVM: = ashr i32
// LLVM: = shl i32
// LLVM: = and i32
// LLVM: = xor i32
// LLVM: = or i32
