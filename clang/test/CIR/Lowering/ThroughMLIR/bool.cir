// RUN: cir-tool %s -cir-to-mlir -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-tool %s -cir-to-mlir -cir-mlir-to-llvm -o - | mlir-translate -mlir-to-llvmir | FileCheck %s -check-prefix=LLVM

#false = #cir.bool<false> : !cir.bool
#true = #cir.bool<true> : !cir.bool
module {
  cir.func @foo() {
    %0 = cir.alloca !cir.bool, cir.ptr <!cir.bool>, ["a", init] {alignment = 1 : i64}
    %1 = cir.const(#true) : !cir.bool
    cir.store %1, %0 : !cir.bool, cir.ptr <!cir.bool>
    cir.return
  }
}

// MLIR: func @foo() {
// MLIR: [[Value:%[a-z0-9]+]] = memref.alloca() {alignment = 1 : i64} : memref<i8>
// MLIR: = arith.constant 1 : i8
// MLIR: memref.store {{.*}}, [[Value]][] : memref<i8>
// return

// LLVM: = alloca i8, i64
// LLVM: store i8 1, ptr %5
// LLVM: ret
