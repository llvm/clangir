// RUN: cir-opt %s -cir-to-mlir -o - | FileCheck %s -check-prefix=MLIR
// RUN: cir-opt %s -cir-to-mlir -cir-mlir-to-llvm -o - | mlir-translate -mlir-to-llvmir | FileCheck %s -check-prefix=LLVM

!s32i = !cir.int<s, 32>
module {
  cir.func @foo() {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["a", init] {alignment = 4 : i64}
    %1 = cir.alloca !s32i, cir.ptr <!s32i>, ["b", init] {alignment = 4 : i64}
    %2 = cir.const(#cir.int<2> : !s32i) : !s32i
    cir.store %2, %0 : !s32i, cir.ptr <!s32i>
    cir.store %2, %1 : !s32i, cir.ptr <!s32i>

    %3 = cir.load %0 : cir.ptr <!s32i>, !s32i
    %4 = cir.unary(plus, %3) : !s32i, !s32i
    cir.store %4, %0 : !s32i, cir.ptr <!s32i>

    %5 = cir.load %1 : cir.ptr <!s32i>, !s32i
    %6 = cir.unary(minus, %5) : !s32i, !s32i
    cir.store %6, %1 : !s32i, cir.ptr <!s32i>
    cir.return
  }
}

// MLIR: %[[#INPUT_PLUS:]] = memref.load
// MLIR: memref.store %[[#INPUT_PLUS]]
// MLIR: %[[#INPUT_MINUS:]] = memref.load
// MLIR: %[[ZERO:[a-z0-9_]+]] = arith.constant 0
// MLIR: arith.subi %[[ZERO]], %[[#INPUT_MINUS]]

// LLVM: = sub i32 0, %[[#]]
