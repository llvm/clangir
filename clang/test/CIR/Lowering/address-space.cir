// RUN: cir-translate %s -cir-to-llvmir -o %t.ll
// RUN: FileCheck --input-file=%t.ll %s -check-prefix=LLVM

!s32i = !cir.int<s, 32>

module attributes {
  cir.triple = "spirv64-unknown-unknown",
  llvm.data_layout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-G1",
  dlti.dl_spec = #dlti.dl_spec<> // Avoid assert errors.
} {
  cir.global external addrspace(offload_global) @addrspace1 = #cir.int<1> : !s32i
  // LLVM: @addrspace1 = addrspace(1) global i32

  cir.global "private" internal addrspace(offload_local) @addrspace2 : !s32i
  // LLVM: @addrspace2 = internal addrspace(3) global i32 undef

  cir.global external addrspace(target<7>) @addrspace3 = #cir.int<3> : !s32i
  // LLVM: @addrspace3 = addrspace(7) global i32

  // LLVM: define void @foo(ptr %0)
  cir.func @foo(%arg0: !cir.ptr<!s32i>) {
    // LLVM-NEXT: alloca ptr,
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["arg", init] {alignment = 8 : i64}
    cir.return
  }

  // LLVM: define void @bar(ptr addrspace(1) %0)
  cir.func @bar(%arg0: !cir.ptr<!s32i, addrspace(target<1>)>) {
    // LLVM-NEXT: alloca ptr addrspace(1)
    %0 = cir.alloca !cir.ptr<!s32i, addrspace(target<1>)>, !cir.ptr<!cir.ptr<!s32i, addrspace(target<1>)>>, ["arg", init] {alignment = 8 : i64}
    cir.return
  }

  // LLVM: define void @baz(ptr %0)
  cir.func @baz(%arg0: !cir.ptr<!s32i, addrspace(target<0>)>) {
    // LLVM-NEXT: alloca ptr,
    %0 = cir.alloca !cir.ptr<!s32i, addrspace(target<0>)>, !cir.ptr<!cir.ptr<!s32i, addrspace(target<0>)>>, ["arg", init] {alignment = 8 : i64}
    cir.return
  }

  // LLVM: define void @test_lower_offload_as()
  cir.func @test_lower_offload_as() {
    %0 = cir.alloca !cir.ptr<!s32i, addrspace(offload_private)>, !cir.ptr<!cir.ptr<!s32i, addrspace(offload_private)>>, ["arg0", init] {alignment = 8 : i64}
    // LLVM-NEXT: alloca ptr,
    %1 = cir.alloca !cir.ptr<!s32i, addrspace(offload_global)>, !cir.ptr<!cir.ptr<!s32i, addrspace(offload_global)>>, ["arg1", init] {alignment = 8 : i64}
    // LLVM-NEXT: alloca ptr addrspace(1),
    %2 = cir.alloca !cir.ptr<!s32i, addrspace(offload_constant)>, !cir.ptr<!cir.ptr<!s32i, addrspace(offload_constant)>>, ["arg2", init] {alignment = 8 : i64}
    // LLVM-NEXT: alloca ptr addrspace(2),
    %3 = cir.alloca !cir.ptr<!s32i, addrspace(offload_local)>, !cir.ptr<!cir.ptr<!s32i, addrspace(offload_local)>>, ["arg3", init] {alignment = 8 : i64}
    // LLVM-NEXT: alloca ptr addrspace(3),
    %4 = cir.alloca !cir.ptr<!s32i, addrspace(offload_generic)>, !cir.ptr<!cir.ptr<!s32i, addrspace(offload_generic)>>, ["arg4", init] {alignment = 8 : i64}
    // LLVM-NEXT: alloca ptr addrspace(4),
    cir.return
  }
}
