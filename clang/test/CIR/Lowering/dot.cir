// RUN: cir-opt %s -cir-to-llvm --reconcile-unrealized-casts -o %t.mlir
// RUN: FileCheck --input-file=%t.mlir %s -check-prefix=MLIR

!s32i = !cir.int<s, 32>
module {
  cir.func @dot(%arg0: !cir.ptr<!cir.double>, %arg1: !cir.ptr<!cir.double>, %arg2: !s32i) -> !cir.double {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["a", init] {alignment = 8 : i64}
    %1 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["b", init] {alignment = 8 : i64}
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["size", init] {alignment = 4 : i64}
    %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["__retval"] {alignment = 8 : i64}
    %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["q", init] {alignment = 8 : i64}
    cir.store %arg0, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>
    cir.store %arg1, %1 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>
    cir.store %arg2, %2 : !s32i, !cir.ptr<!s32i>
    %5 = cir.const(#cir.fp<0.000000e+00> : !cir.double) : !cir.double
    cir.store %5, %4 : !cir.double, !cir.ptr<!cir.double>
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64}
      %9 = cir.const(#cir.int<0> : !s32i) : !s32i
      cir.store %9, %8 : !s32i, !cir.ptr<!s32i>
      cir.for : cond {
        %10 = cir.load %8 : !cir.ptr<!s32i>, !s32i
        %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i
        %12 = cir.cmp(lt, %10, %11) : !s32i, !s32i
        %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool
        cir.condition(%13)
      } body {
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double>
        %11 = cir.load %8 : !cir.ptr<!s32i>, !s32i
        %12 = cir.ptr_stride(%10 : !cir.ptr<!cir.double>, %11 : !s32i), !cir.ptr<!cir.double>
        %13 = cir.load %12 : !cir.ptr<!cir.double>, !cir.double
        %14 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double>
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i
        %16 = cir.ptr_stride(%14 : !cir.ptr<!cir.double>, %15 : !s32i), !cir.ptr<!cir.double>
        %17 = cir.load %16 : !cir.ptr<!cir.double>, !cir.double
        %18 = cir.binop(mul, %13, %17) : !cir.double
        %19 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double
        %20 = cir.binop(add, %19, %18) : !cir.double
        cir.store %20, %4 : !cir.double, !cir.ptr<!cir.double>
        cir.yield
      } step {
        %10 = cir.load %8 : !cir.ptr<!s32i>, !s32i
        %11 = cir.unary(inc, %10) : !s32i, !s32i
        cir.store %11, %8 : !s32i, !cir.ptr<!s32i>
        cir.yield
      }
    }
    %6 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double
    cir.store %6, %3 : !cir.double, !cir.ptr<!cir.double>
    %7 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double
    cir.return %7 : !cir.double
  }
}

//      MLIR: module {
// MLIR-NEXT:   llvm.func @dot(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i32) -> f64
// MLIR-NEXT:     %0 = llvm.mlir.constant(1 : index) : i64
// MLIR-NEXT:     %1 = llvm.alloca %0 x !llvm.ptr {alignment = 8 : i64} : (i64) -> !llvm.ptr
// MLIR-NEXT:     %2 = llvm.mlir.constant(1 : index) : i64
// MLIR-NEXT:     %3 = llvm.alloca %2 x !llvm.ptr {alignment = 8 : i64} : (i64) -> !llvm.ptr
// MLIR-NEXT:     %4 = llvm.mlir.constant(1 : index) : i64
// MLIR-NEXT:     %5 = llvm.alloca %4 x i32 {alignment = 4 : i64} : (i64) -> !llvm.ptr
// MLIR-NEXT:     %6 = llvm.mlir.constant(1 : index) : i64
// MLIR-NEXT:     %7 = llvm.alloca %6 x f64 {alignment = 8 : i64} : (i64) -> !llvm.ptr
// MLIR-NEXT:     %8 = llvm.mlir.constant(1 : index) : i64
// MLIR-NEXT:     %9 = llvm.alloca %8 x f64 {alignment = 8 : i64} : (i64) -> !llvm.ptr
// MLIR-NEXT:     llvm.store %arg0, %1 : !llvm.ptr, !llvm.ptr
// MLIR-NEXT:     llvm.store %arg1, %3 : !llvm.ptr, !llvm.ptr
// MLIR-NEXT:     llvm.store %arg2, %5 : i32, !llvm.ptr
// MLIR-NEXT:     %10 = llvm.mlir.constant(0.000000e+00 : f64) : f64
// MLIR-NEXT:     llvm.store %10, %9 : f64, !llvm.ptr
// MLIR-NEXT:     llvm.br ^bb1
// MLIR-NEXT:   ^bb1:  // pred: ^bb0
// MLIR-NEXT:     %11 = llvm.mlir.constant(1 : index) : i64
// MLIR-NEXT:     %12 = llvm.alloca %11 x i32 {alignment = 4 : i64} : (i64) -> !llvm.ptr
// MLIR-NEXT:     %13 = llvm.mlir.constant(0 : i32) : i32
// MLIR-NEXT:     llvm.store %13, %12 : i32, !llvm.ptr
// MLIR-NEXT:     llvm.br ^bb2
// MLIR-NEXT:   ^bb2:  // 2 preds: ^bb1, ^bb4
// MLIR-NEXT:     %14 = llvm.load %12 : !llvm.ptr -> i32
// MLIR-NEXT:     %15 = llvm.load %5 : !llvm.ptr -> i32
// MLIR-NEXT:     %16 = llvm.icmp "slt" %14, %15 : i32
// MLIR-NEXT:     %17 = llvm.zext %16 : i1 to i32
// MLIR-NEXT:     %18 = llvm.mlir.constant(0 : i32) : i32
// MLIR-NEXT:     %19 = llvm.icmp "ne" %17, %18 : i32
// MLIR-NEXT:     llvm.cond_br %19, ^bb3, ^bb5
// MLIR-NEXT:   ^bb3:  // pred: ^bb2
// MLIR-NEXT:     %20 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
// MLIR-NEXT:     %21 = llvm.load %12 : !llvm.ptr -> i32
// MLIR-NEXT:     %22 = llvm.getelementptr %20[%21] : (!llvm.ptr, i32) -> !llvm.ptr, f64
// MLIR-NEXT:     %23 = llvm.load %22 : !llvm.ptr -> f64
// MLIR-NEXT:     %24 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
// MLIR-NEXT:     %25 = llvm.load %12 : !llvm.ptr -> i32
// MLIR-NEXT:     %26 = llvm.getelementptr %24[%25] : (!llvm.ptr, i32) -> !llvm.ptr, f64
// MLIR-NEXT:     %27 = llvm.load %26 : !llvm.ptr -> f64
// MLIR-NEXT:     %28 = llvm.fmul %23, %27  : f64
// MLIR-NEXT:     %29 = llvm.load %9 : !llvm.ptr -> f64
// MLIR-NEXT:     %30 = llvm.fadd %29, %28  : f64
// MLIR-NEXT:     llvm.store %30, %9 : f64, !llvm.ptr
// MLIR-NEXT:     llvm.br ^bb4
// MLIR-NEXT:   ^bb4:  // pred: ^bb3
// MLIR-NEXT:     %31 = llvm.load %12 : !llvm.ptr -> i32
// MLIR-NEXT:     %32 = llvm.mlir.constant(1 : i32) : i32
// MLIR-NEXT:     %33 = llvm.add %31, %32  : i32
// MLIR-NEXT:     llvm.store %33, %12 : i32, !llvm.ptr
// MLIR-NEXT:     llvm.br ^bb2
// MLIR-NEXT:   ^bb5:  // pred: ^bb2
// MLIR-NEXT:     llvm.br ^bb6
// MLIR-NEXT:   ^bb6:  // pred: ^bb5
// MLIR-NEXT:     %34 = llvm.load %9 : !llvm.ptr -> f64
// MLIR-NEXT:     llvm.store %34, %7 : f64, !llvm.ptr
// MLIR-NEXT:     %35 = llvm.load %7 : !llvm.ptr -> f64
// MLIR-NEXT:     llvm.return %35 : f64
// MLIR-NEXT:   }
// MLIR-NEXT: }
