// RUN: cir-opt %s -cir-to-llvm -o %t.mlir
// RUN: FileCheck --input-file=%t.mlir %s

module {
  cir.global  external dsolocal @i = #cir.fp<0.000000e+00> : !cir.long_double<!cir.f128> {alignment = 16 : i64}
  cir.func  @t2(%arg0: !cir.long_double<!cir.f128>) -> !cir.long_double<!cir.f128> {
    %0 = cir.alloca !cir.long_double<!cir.f128>, !cir.ptr<!cir.long_double<!cir.f128>>, ["i2", init] {alignment = 16 : i64}
    %1 = cir.alloca !cir.long_double<!cir.f128>, !cir.ptr<!cir.long_double<!cir.f128>>, ["__retval"] {alignment = 16 : i64}    
    cir.store %arg0, %0 : !cir.long_double<!cir.f128>, !cir.ptr<!cir.long_double<!cir.f128>>
    %2 = cir.load %0 : !cir.ptr<!cir.long_double<!cir.f128>>, !cir.long_double<!cir.f128>
    %3 = cir.get_global @i : !cir.ptr<!cir.long_double<!cir.f128>>
    %4 = cir.load %3 : !cir.ptr<!cir.long_double<!cir.f128>>, !cir.long_double<!cir.f128>
    %5 = cir.binop(add, %2, %4) : !cir.long_double<!cir.f128>
    cir.store %5, %1 : !cir.long_double<!cir.f128>, !cir.ptr<!cir.long_double<!cir.f128>>
    %6 = cir.load %1 : !cir.ptr<!cir.long_double<!cir.f128>>, !cir.long_double<!cir.f128>
    cir.return %6 : !cir.long_double<!cir.f128>
  } 
}


// CHECK:   llvm.mlir.global external @i(0.000000e+00 : f128) {addr_space = 0 : i32, alignment = 16 : i64} : f128
// CHECK:   llvm.func @t2(%arg0: f128) -> f128 attributes {cir.extra_attrs = #fn_attr, global_visibility = #cir<visibility default>} 
// CHECK:     %{{[0-9]+}} = llvm.alloca %{{[0-9]+}} x f128 {alignment = 16 : i64} : (i64) -> !llvm.ptr
// CHECK:     %{{[0-9]+}} = llvm.alloca %{{[0-9]+}} x f128 {alignment = 16 : i64} : (i64) -> !llvm.ptr
// CHECK:     llvm.store %arg0, %{{[0-9]+}} {alignment = 16 : i64} : f128, !llvm.ptr
// CHECK:     %{{[0-9]+}} = llvm.load %{{[0-9]+}} {alignment = 16 : i64} : !llvm.ptr -> f128
// CHECK:     %{{[0-9]+}} = llvm.mlir.addressof @i : !llvm.ptr
// CHECK:     %{{[0-9]+}} = llvm.load %{{[0-9]+}} {alignment = 16 : i64} : !llvm.ptr -> f128
// CHECK:     %{{[0-9]+}} = llvm.fadd %{{[0-9]+}}, %{{[0-9]+}}  : f128
// CHECK:     llvm.store %{{[0-9]+}}, %{{[0-9]+}} {alignment = 16 : i64} : f128, !llvm.ptr
// CHECK:     %{{[0-9]+}} = llvm.load %{{[0-9]+}} {alignment = 16 : i64} : !llvm.ptr -> f128
// CHECK:     llvm.return %{{[0-9]+}} : f128

