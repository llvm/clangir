// RUN: cir-opt %s -cir-to-llvm -o %t.mlir
// RUN: FileCheck --input-file=%t.mlir %s

!s8i = !cir.int<s, 8>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>

module {
  cir.func @shouldLowerSwitchWithDefault(%arg0: !s8i) {
    cir.switch (%arg0 : !s8i) [
    // CHECK: llvm.switch %arg0 : i8, ^bb[[#DEFAULT:]] [
    // CHECK:   1: ^bb[[#CASE1:]]
    // CHECK: ]
    case (equal, 1) {
      cir.break
    },
    // CHECK: ^bb[[#CASE1]]:
    // CHECK:   llvm.br ^bb[[#EXIT:]]
    case (default) {
      cir.break
    }
    // CHECK: ^bb[[#DEFAULT]]:
    // CHECK:   llvm.br ^bb[[#EXIT]]
    ]
    // CHECK: ^bb[[#EXIT]]:
    cir.return
  }


  cir.func @shouldLowerSwitchWithoutDefault(%arg0: !s32i) {
    cir.switch (%arg0 : !s32i) [
    // Default block is the exit block:
    // CHECK: llvm.switch %arg0 : i32, ^bb[[#EXIT:]] [
    // CHECK:   1: ^bb[[#CASE1:]]
    // CHECK: ]
    case (equal, 1) {
      cir.break
    }
    // CHECK: ^bb[[#CASE1]]:
    // CHECK:   llvm.br ^bb[[#EXIT]]
    ]
    // CHECK: ^bb[[#EXIT]]:
    cir.return
  }


  cir.func @shouldLowerSwitchWithImplicitFallthrough(%arg0: !s64i) {
    cir.switch (%arg0 : !s64i) [
    // CHECK: llvm.switch %arg0 : i64, ^bb[[#EXIT:]] [
    // CHECK:   1: ^bb[[#CASE1N2:]],
    // CHECK:   2: ^bb[[#CASE1N2]]
    // CHECK: ]
    case (anyof, [1, 2] : !s64i) { // case 1 and 2 use same region
      cir.break
    }
    // CHECK: ^bb[[#CASE1N2]]:
    // CHECK:   llvm.br ^bb[[#EXIT]]
    ]
    // CHECK: ^bb[[#EXIT]]:
    cir.return
  }


  cir.func @shouldLowerSwitchWithExplicitFallthrough(%arg0: !s64i) {
      cir.switch (%arg0 : !s64i) [
      // CHECK: llvm.switch %arg0 : i64, ^bb[[#EXIT:]] [
      // CHECK:   1: ^bb[[#CASE1:]],
      // CHECK:   2: ^bb[[#CASE2:]]
      // CHECK: ]
      case (equal, 1 : !s64i) { // case 1 has its own region
        cir.yield // fallthrough to case 2
      },
      // CHECK: ^bb[[#CASE1]]:
      // CHECK:   llvm.br ^bb[[#CASE2]]
      case (equal, 2 : !s64i) {
        cir.break
      }
      // CHECK: ^bb[[#CASE2]]:
      // CHECK:   llvm.br ^bb[[#EXIT]]
      ]
      // CHECK: ^bb[[#EXIT]]:
    cir.return
  }


  cir.func @shouldLowerSwitchWithFallthroughToExit(%arg0: !s64i) {
      cir.switch (%arg0 : !s64i) [
      // CHECK: llvm.switch %arg0 : i64, ^bb[[#EXIT:]] [
      // CHECK:   1: ^bb[[#CASE1:]]
      // CHECK: ]
      case (equal, 1 : !s64i) {
        cir.yield // fallthrough to exit
      }
      // CHECK: ^bb[[#CASE1]]:
      // CHECK:   llvm.br ^bb[[#EXIT]]
      ]
      // CHECK: ^bb[[#EXIT]]:
    cir.return
  }


  cir.func @shouldDropEmptySwitch(%arg0: !s64i) {
    cir.switch (%arg0 : !s64i) [
    ]
    // CHECK-NOT: llvm.switch
    cir.return
  }

  cir.func @shouldLowerMultiBlockCase(%arg0: !s32i) {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["a", init] {alignment = 4 : i64}
    cir.store %arg0, %0 : !s32i, cir.ptr <!s32i>
    cir.scope {
      %1 = cir.load %0 : cir.ptr <!s32i>, !s32i
      cir.switch (%1 : !s32i) [
      case (equal, 3) {
        cir.return
      ^bb1:  // no predecessors
        cir.break
      }
      ] 
    }
    cir.return
  }
  // CHECK: llvm.func @shouldLowerMultiBlockCase
  // CHECK: ^bb1:  // pred: ^bb0
  // CHECK:   llvm.switch {{.*}} : i32, ^bb4 [
  // CHECK:     3: ^bb2
  // CHECK:   ]
  // CHECK: ^bb2:  // pred: ^bb1
  // CHECK:   llvm.return
  // CHECK: ^bb3:  // no predecessors
  // CHECK:   llvm.br ^bb4
  // CHECK: ^bb4:  // 2 preds: ^bb1, ^bb3
  // CHECK:   llvm.br ^bb5
  // CHECK: ^bb5:  // pred: ^bb4
  // CHECK:   llvm.return
  // CHECK: }

  cir.func @shouldLowerNestedBreak(%arg0: !s32i, %arg1: !s32i) -> !s32i {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["x", init] {alignment = 4 : i64}
    %1 = cir.alloca !s32i, cir.ptr <!s32i>, ["y", init] {alignment = 4 : i64}
    %2 = cir.alloca !s32i, cir.ptr <!s32i>, ["__retval"] {alignment = 4 : i64}
    cir.store %arg0, %0 : !s32i, cir.ptr <!s32i>
    cir.store %arg1, %1 : !s32i, cir.ptr <!s32i>
    cir.scope {
      %5 = cir.load %0 : cir.ptr <!s32i>, !s32i
      cir.switch (%5 : !s32i) [
      case (equal, 0) {
        cir.scope {
          %6 = cir.load %1 : cir.ptr <!s32i>, !s32i
          %7 = cir.const(#cir.int<0> : !s32i) : !s32i
          %8 = cir.cmp(ge, %6, %7) : !s32i, !s32i
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool
          cir.if %9 {
            cir.break
          }
        }
        cir.break
      }
      ] 
    } 
    %3 = cir.const(#cir.int<3> : !s32i) : !s32i
    cir.store %3, %2 : !s32i, cir.ptr <!s32i>
    %4 = cir.load %2 : cir.ptr <!s32i>, !s32i
    cir.return %4 : !s32i 
  }
  // CHECK:  llvm.func @shouldLowerNestedBreak
  // CHECK:    llvm.switch %6 : i32, ^bb7 [
  // CHECK:      0: ^bb2
  // CHECK:    ]
  // CHECK:  ^bb2:  // pred: ^bb1
  // CHECK:    llvm.br ^bb3
  // CHECK:  ^bb3:  // pred: ^bb2
  // CHECK:    llvm.cond_br %14, ^bb4, ^bb5
  // CHECK:  ^bb4:  // pred: ^bb3
  // CHECK:    llvm.br ^bb7
  // CHECK:  ^bb5:  // pred: ^bb3
  // CHECK:    llvm.br ^bb6
  // CHECK:  ^bb6:  // pred: ^bb5
  // CHECK:    llvm.br ^bb7
  // CHECK:  ^bb7:  // 3 preds: ^bb1, ^bb4, ^bb6
  // CHECK:    llvm.br ^bb8
  // CHECK:  ^bb8:  // pred: ^bb7
  // CHECK:    llvm.return
}
