// Test attempts to build bogus CIR
// RUN: cir-tool %s -verify-diagnostics -split-input-file
// XFAIL: *

// expected-error@+2 {{'cir.const' op nullptr expects pointer type}}
cir.func @p0() {
  %1 = cir.const(#cir.null : !cir.ptr<i32>) : i32
  cir.return
}

// -----

// expected-error@+2 {{'cir.const' op result type ('i32') must be '!cir.bool' for 'true'}}
cir.func @b0() {
  %1 = cir.const(true) : i32
  cir.return
}

// -----

cir.func @if0() {
  %0 = cir.const(true) : !cir.bool
  // expected-error@+1 {{'cir.if' op  region control flow edge from Region #0 to parent results: source has 1 operands, but target successor needs 0}}
  cir.if %0 {
    %6 = cir.const(3 : i32) : i32
    cir.yield %6 : i32
  }
  cir.return
}

// -----

cir.func @yield0() {
  %0 = cir.const(true) : !cir.bool
  cir.if %0 { // expected-error {{custom op 'cir.if' expected at least one block with cir.yield or cir.return}}
    cir.br ^a
  ^a:
  }
  cir.return
}

// -----

cir.func @yieldfallthrough() {
  %0 = cir.const(true) : !cir.bool
  cir.if %0 {
    cir.yield fallthrough // expected-error {{'cir.yield' op fallthrough only expected within 'cir.switch'}}
  }
  cir.return
}

// -----

cir.func @yieldbreak() {
  %0 = cir.const(true) : !cir.bool
  cir.if %0 {
    cir.yield break // expected-error {{shall be dominated by 'cir.loop' or 'cir.switch'}}
  }
  cir.return
}

// -----

cir.func @yieldcontinue() {
  %0 = cir.const(true) : !cir.bool
  cir.if %0 {
    cir.yield continue // expected-error {{shall be dominated by 'cir.loop'}}
  }
  cir.return
}

// -----

cir.func @s0() {
  %1 = cir.const(2 : i32) : i32
  cir.switch (%1 : i32) [
    case (equal, 5) {
      %2 = cir.const(3 : i32) : i32
    }
  ] // expected-error {{blocks are expected to be explicitly terminated}}
  cir.return
}

// -----

cir.func @s1() {
  %1 = cir.const(2 : i32) : i32
  cir.switch (%1 : i32) [
    case (equal, 5) {
    }
  ] // expected-error {{case region shall not be empty}}
  cir.return
}

// -----

cir.func @badstride(%x: !cir.ptr<i32>) {
  %idx = cir.const(2 : i32) : i32
  %4 = cir.ptr_stride(%x : !cir.ptr<i32>, %idx : i32), !cir.ptr<f32> // expected-error {{requires the same type for first operand and result}}
  cir.return
}

// -----

cir.func @cast0(%arg0: i32) {
  %1 = cir.cast(int_to_bool, %arg0 : i32), i32 // expected-error {{requires !cir.bool type for result}}
  cir.return
}

// -----

cir.func @cast1(%arg1: f32) {
  %1 = cir.cast(int_to_bool, %arg1 : f32), !cir.bool // expected-error {{requires integral type for result}}
  cir.return
}

// -----

cir.func @cast2(%p: !cir.ptr<i32>) {
  %2 = cir.cast(array_to_ptrdecay, %p : !cir.ptr<i32>), !cir.ptr<i32> // expected-error {{requires !cir.array pointee}}
  cir.return
}

// -----

cir.func @cast3(%p: !cir.ptr<i32>) {
  %0 = cir.alloca !cir.array<i32 x 10>, cir.ptr <!cir.array<i32 x 10>>, ["x", init]
  %2 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<i32 x 10>>), !cir.ptr<f32> // expected-error {{requires same type for array element and pointee result}}
  cir.return
}

// -----

cir.func @cast4(%p: !cir.ptr<i32>) {
  %2 = cir.cast(bitcast, %p : !cir.ptr<i32>), i32 // expected-error {{requires !cir.ptr type for source and result}}
  cir.return
}

// -----

cir.func @b0() {
  cir.scope {
    cir.loop while(cond :  {  // expected-error {{cond region must be terminated with 'cir.yield' or 'cir.yield continue'}}
      %0 = cir.const(true) : !cir.bool
      cir.brcond %0 ^bb1, ^bb2
      ^bb1:
        cir.yield break
      ^bb2:
        cir.yield
    }, step :  {
      cir.yield
    })  {
      cir.br ^bb1
    ^bb1:
      cir.return
    }
  }
  cir.return
}

// -----

module {
  cir.global external @a = #cir.const_array<[0 : i8, -23 : i8, 33 : i8] : !cir.array<i32 x 3>> // expected-error {{constant array element should match array element type}}
} // expected-error {{expected constant attribute to match type}}

// -----

module {
  cir.global external @a = #cir.const_array<[0 : i8, -23 : i8, 33 : i8] : !cir.array<i8 x 4>> // expected-error {{constant array size should match type size}}
} // expected-error {{expected constant attribute to match type}}

// -----

module {
  cir.global external @b = #cir.const_array<"example\00" : !cir.array<i32 x 8>> // expected-error {{constant array element for string literals expects i8 array element type}}
} // expected-error {{expected constant attribute to match type}}

// -----

module {
  cir.global "private" constant external @".str2" = #cir.const_array<"example\00"> {alignment = 1 : i64} // expected-error {{expected type declaration for string literal}}
} // expected-error@-1 {{expected constant attribute to match type}}

// -----

module {
  cir.global @a = #cir.const_array<[0 : i8, -23 : i8, 33 : i8] : !cir.array<i32 x 3>> // expected-error {{expected string or keyword containing one of the following enum values for attribute 'linkage' [external, available_externally, linkonce, linkonce_odr, weak, weak_odr, internal, private, extern_weak, common]}}
}

// -----

module {
  cir.global "private" external @v = 3 : i32 // expected-error {{private visibility not allowed with 'external' linkage}}
}

// -----

module {
  cir.global "public" internal @v = 3 : i32 // expected-error {{public visibility not allowed with 'internal' linkage}}
}

// -----

cir.func @unary0() {
  %0 = cir.alloca i32, cir.ptr <i32>, ["a", init] {alignment = 4 : i64}
  %1 = cir.const(2 : i32) : i32

  %3 = cir.unary(inc, %1) : i32, i32 // expected-error {{'cir.unary' op requires input to be defined by a memory load}}
  cir.store %3, %0 : i32, cir.ptr <i32>
  cir.return
}

// -----

cir.func @unary1() {
  %0 = cir.alloca i32, cir.ptr <i32>, ["a", init] {alignment = 4 : i64}
  %1 = cir.const(2 : i32) : i32
  cir.store %1, %0 : i32, cir.ptr <i32>

  %2 = cir.load %0 : cir.ptr <i32>, i32
  %3 = cir.unary(dec, %2) : i32, i32 //  // expected-error {{'cir.unary' op requires result to be used by a memory store to the same address as the input memory load}}
  cir.return
}

// -----

module {
  cir.global external @v = #cir.zero : i32 // expected-error {{zero expects struct type}}
}

// -----

cir.func coroutine @bad_task() { // expected-error {{coroutine body must use at least one cir.await op}}
  cir.return
}

// -----

cir.func coroutine @bad_yield() {
  cir.scope {
    cir.await(user, ready : {
      cir.yield
    }, suspend : {
      cir.yield
    }, resume : {
      cir.yield nosuspend // expected-error {{kind 'nosuspend' can only be used in 'ready' and 'suspend' regions}}
    },)
  }
  cir.return
}

// -----

cir.func coroutine @good_yield() {
  cir.scope {
    cir.await(user, ready : {
      cir.yield nosuspend
    }, suspend : {
      cir.yield nosuspend
    }, resume : {
      cir.yield
    },)
  }
  cir.return
}

// -----

module {
  // Note MLIR requires "private" for global declarations, should get
  // rid of this somehow in favor of clarity?
  cir.global "private" external @_ZTVN10__cxxabiv120__si_class_type_infoE : !cir.ptr<i32>

  cir.global external @type_info_B = #cir.typeinfo< // expected-error {{typeinfo element must match result element type}} 
    [#cir.global_view<@_ZTVN10__cxxabiv120__si_class_type_infoE, [2]> : !cir.ptr<i16>]
    : !cir.struct<"", !cir.ptr<i8>>
  >
} // expected-error {{'cir.global' expected constant attribute to match type}}
