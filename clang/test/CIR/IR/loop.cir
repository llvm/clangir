// RUN: cir-opt %s | FileCheck %s
#false = #cir.bool<false> : !cir.bool
#true = #cir.bool<true> : !cir.bool
!u32i = !cir.int<u, 32>

cir.func @l0() {
  %0 = cir.alloca !u32i, cir.ptr <!u32i>, ["x", init] {alignment = 4 : i64}
  %1 = cir.const(#cir.int<0> : !u32i) : !u32i
  cir.store %1, %0 : !u32i, cir.ptr <!u32i>
  cir.scope {
    %2 = cir.alloca !u32i, cir.ptr <!u32i>, ["i", init] {alignment = 4 : i64}
    %3 = cir.const(#cir.int<0> : !u32i) : !u32i
    cir.store %3, %2 : !u32i, cir.ptr <!u32i>
    cir.loop for(cond :  {
      %4 = cir.load %2 : cir.ptr <!u32i>, !u32i
      %5 = cir.const(#cir.int<10> : !u32i) : !u32i
      %6 = cir.cmp(lt, %4, %5) : !u32i, !cir.bool
      cir.condition(%6)
    }, step :  {
      %4 = cir.load %2 : cir.ptr <!u32i>, !u32i
      %5 = cir.const(#cir.int<1> : !u32i) : !u32i
      %6 = cir.binop(add, %4, %5) : !u32i
      cir.store %6, %2 : !u32i, cir.ptr <!u32i>
      cir.yield
    })  {
      %4 = cir.load %0 : cir.ptr <!u32i>, !u32i
      %5 = cir.const(#cir.int<1> : !u32i) : !u32i
      %6 = cir.binop(add, %4, %5) : !u32i
      cir.store %6, %0 : !u32i, cir.ptr <!u32i>
      %7 = cir.const(#true) : !cir.bool
      cir.if %7 {
        cir.break
      }
      cir.yield
    }
  }
  cir.scope {
    %2 = cir.alloca !u32i, cir.ptr <!u32i>, ["i", init] {alignment = 4 : i64}
    %3 = cir.const(#cir.int<0> : !u32i) : !u32i
    cir.store %3, %2 : !u32i, cir.ptr <!u32i>
    cir.loop while(cond :  {
      %4 = cir.load %2 : cir.ptr <!u32i>, !u32i
      %5 = cir.const(#cir.int<10> : !u32i) : !u32i
      %6 = cir.cmp(lt, %4, %5) : !u32i, !cir.bool
      cir.condition(%6)
    }, step :  {
      cir.yield
    })  {
      %4 = cir.load %0 : cir.ptr <!u32i>, !u32i
      %5 = cir.const(#cir.int<1> : !u32i) : !u32i
      %6 = cir.binop(add, %4, %5) : !u32i
      cir.store %6, %0 : !u32i, cir.ptr <!u32i>
      %7 = cir.const(#true) : !cir.bool
      cir.if %7 {
        cir.continue
      }
      cir.yield
    }
  }

  cir.return
}

// CHECK: cir.func @l0
// CHECK: cir.loop for(cond :  {
// CHECK-NEXT:     %4 = cir.load %2 : cir.ptr <!u32i>, !u32i
// CHECK-NEXT:     %5 = cir.const(#cir.int<10> : !u32i) : !u32i
// CHECK-NEXT:     %6 = cir.cmp(lt, %4, %5) : !u32i, !cir.bool
// CHECK-NEXT:     cir.condition(%6)
// CHECK-NEXT:   }, step :  {
// CHECK-NEXT:     %4 = cir.load %2 : cir.ptr <!u32i>, !u32i
// CHECK-NEXT:     %5 = cir.const(#cir.int<1> : !u32i) : !u32i
// CHECK-NEXT:     %6 = cir.binop(add, %4, %5) : !u32i
// CHECK-NEXT:     cir.store %6, %2 : !u32i, cir.ptr <!u32i>
// CHECK-NEXT:     cir.yield
// CHECK-NEXT:   })  {
// CHECK-NEXT:     %4 = cir.load %0 : cir.ptr <!u32i>, !u32i
// CHECK-NEXT:     %5 = cir.const(#cir.int<1> : !u32i) : !u32i
// CHECK-NEXT:     %6 = cir.binop(add, %4, %5) : !u32i
// CHECK-NEXT:     cir.store %6, %0 : !u32i, cir.ptr <!u32i>
// CHECK-NEXT:     %7 = cir.const(#true) : !cir.bool
// CHECK-NEXT:     cir.if %7 {
// CHECK-NEXT:       cir.break
// CHECK-NEXT:     }
// CHECK-NEXT:     cir.yield
// CHECK-NEXT: }

// CHECK:        cir.loop while(cond :  {
// CHECK-NEXT:     %4 = cir.load %2 : cir.ptr <!u32i>, !u32i
// CHECK-NEXT:     %5 = cir.const(#cir.int<10> : !u32i) : !u32i
// CHECK-NEXT:     %6 = cir.cmp(lt, %4, %5) : !u32i, !cir.bool
// CHECK-NEXT:     cir.condition(%6)
// CHECK-NEXT:   }, step :  {
// CHECK-NEXT:     cir.yield
// CHECK-NEXT:   })  {
// CHECK-NEXT:     %4 = cir.load %0 : cir.ptr <!u32i>, !u32i
// CHECK-NEXT:     %5 = cir.const(#cir.int<1> : !u32i) : !u32i
// CHECK-NEXT:     %6 = cir.binop(add, %4, %5) : !u32i
// CHECK-NEXT:     cir.store %6, %0 : !u32i, cir.ptr <!u32i>
// CHECK-NEXT:     %7 = cir.const(#true) : !cir.bool
// CHECK-NEXT:     cir.if %7 {
// CHECK-NEXT:       cir.continue
// CHECK-NEXT:     }
// CHECK-NEXT:     cir.yield
// CHECK-NEXT:   }

cir.func @l1(%arg0 : !cir.bool) {
  cir.scope {
    cir.loop while(cond :  {
      cir.condition(%arg0)
    }, step :  {
      cir.yield
    })  {
      cir.yield
    }
  }
  cir.return
}

// CHECK: cir.func @l1
// CHECK-NEXT:  cir.scope {
// CHECK-NEXT:    cir.loop while(cond :  {
// CHECK-NEXT:      cir.condition(%arg0)
// CHECK-NEXT:    }, step :  {
// CHECK-NEXT:      cir.yield
// CHECK-NEXT:    })  {
// CHECK-NEXT:      cir.yield
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// CHECK-NEXT:  cir.return
// CHECK-NEXT: }

cir.func @l2(%arg0 : !cir.bool) {
  cir.scope {
    cir.loop while(cond :  {
      cir.condition(%arg0)
    }, step :  {
      cir.yield
    })  {
      cir.yield
    }
  }
  cir.return
}

// CHECK: cir.func @l2
// CHECK-NEXT:  cir.scope {
// CHECK-NEXT:    cir.loop while(cond :  {
// CHECK-NEXT:      cir.condition(%arg0)
// CHECK-NEXT:    }, step :  {
// CHECK-NEXT:      cir.yield
// CHECK-NEXT:    })  {
// CHECK-NEXT:      cir.yield
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// CHECK-NEXT:  cir.return
// CHECK-NEXT: }
