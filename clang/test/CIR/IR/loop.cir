// RUN: cir-tool %s | FileCheck %s

cir.func @l0() {
  %0 = cir.alloca i32, cir.ptr <i32>, ["x", init] {alignment = 4 : i64}
  %1 = cir.cst(0 : i32) : i32
  cir.store %1, %0 : i32, cir.ptr <i32>
  cir.scope {
    %2 = cir.alloca i32, cir.ptr <i32>, ["i", init] {alignment = 4 : i64}
    %3 = cir.cst(0 : i32) : i32
    cir.store %3, %2 : i32, cir.ptr <i32>
    cir.loop for(cond :  {
      %4 = cir.load %2 : cir.ptr <i32>, i32
      %5 = cir.cst(10 : i32) : i32
      %6 = cir.cmp(lt, %4, %5) : i32, !cir.bool
      cir.brcond %6 ^bb1, ^bb2
      ^bb1:
        cir.yield continue
      ^bb2:
        cir.yield
    }, step :  {
      %4 = cir.load %2 : cir.ptr <i32>, i32
      %5 = cir.cst(1 : i32) : i32
      %6 = cir.binop(add, %4, %5) : i32
      cir.store %6, %2 : i32, cir.ptr <i32>
      cir.yield
    })  {
      %4 = cir.load %0 : cir.ptr <i32>, i32
      %5 = cir.cst(1 : i32) : i32
      %6 = cir.binop(add, %4, %5) : i32
      cir.store %6, %0 : i32, cir.ptr <i32>
      %7 = cir.cst(true) : !cir.bool
      cir.if %7 {
        cir.yield break
      }
      cir.yield
    }
  }
  cir.scope {
    %2 = cir.alloca i32, cir.ptr <i32>, ["i", init] {alignment = 4 : i64}
    %3 = cir.cst(0 : i32) : i32
    cir.store %3, %2 : i32, cir.ptr <i32>
    cir.loop while(cond :  {
      %4 = cir.load %2 : cir.ptr <i32>, i32
      %5 = cir.cst(10 : i32) : i32
      %6 = cir.cmp(lt, %4, %5) : i32, !cir.bool
      cir.brcond %6 ^bb1, ^bb2
      ^bb1:
        cir.yield continue
      ^bb2:
        cir.yield
    }, step :  {
      cir.yield
    })  {
      %4 = cir.load %0 : cir.ptr <i32>, i32
      %5 = cir.cst(1 : i32) : i32
      %6 = cir.binop(add, %4, %5) : i32
      cir.store %6, %0 : i32, cir.ptr <i32>
      %7 = cir.cst(true) : !cir.bool
      cir.if %7 {
        cir.yield continue
      }
      cir.yield
    }
  }

  cir.scope {
    %2 = cir.alloca i32, cir.ptr <i32>, ["i", init] {alignment = 4 : i64}
    %3 = cir.cst(0 : i32) : i32
    cir.store %3, %2 : i32, cir.ptr <i32>
    cir.loop dowhile(cond :  {
      %4 = cir.load %2 : cir.ptr <i32>, i32
      %5 = cir.cst(10 : i32) : i32
      %6 = cir.cmp(lt, %4, %5) : i32, !cir.bool
      cir.brcond %6 ^bb1, ^bb2
      ^bb1:
        cir.yield continue
      ^bb2:
        cir.yield
    }, step :  {
      cir.yield
    })  {
      %4 = cir.load %0 : cir.ptr <i32>, i32
      %5 = cir.cst(1 : i32) : i32
      %6 = cir.binop(add, %4, %5) : i32
      cir.store %6, %0 : i32, cir.ptr <i32>
      cir.yield
    }
  }
  cir.return
}

// CHECK: cir.func @l0
// CHECK: cir.loop for(cond :  {
// CHECK-NEXT:     %4 = cir.load %2 : cir.ptr <i32>, i32
// CHECK-NEXT:     %5 = cir.cst(10 : i32) : i32
// CHECK-NEXT:     %6 = cir.cmp(lt, %4, %5) : i32, !cir.bool
// CHECK-NEXT:     cir.brcond %6 ^bb1, ^bb2
// CHECK-NEXT:     ^bb1:
// CHECK-NEXT:       cir.yield continue
// CHECK-NEXT:     ^bb2:
// CHECK-NEXT:       cir.yield
// CHECK-NEXT:   }, step :  {
// CHECK-NEXT:     %4 = cir.load %2 : cir.ptr <i32>, i32
// CHECK-NEXT:     %5 = cir.cst(1 : i32) : i32
// CHECK-NEXT:     %6 = cir.binop(add, %4, %5) : i32
// CHECK-NEXT:     cir.store %6, %2 : i32, cir.ptr <i32>
// CHECK-NEXT:     cir.yield
// CHECK-NEXT:   })  {
// CHECK-NEXT:     %4 = cir.load %0 : cir.ptr <i32>, i32
// CHECK-NEXT:     %5 = cir.cst(1 : i32) : i32
// CHECK-NEXT:     %6 = cir.binop(add, %4, %5) : i32
// CHECK-NEXT:     cir.store %6, %0 : i32, cir.ptr <i32>
// CHECK-NEXT:     %7 = cir.cst(true) : !cir.bool
// CHECK-NEXT:     cir.if %7 {
// CHECK-NEXT:       cir.yield break
// CHECK-NEXT:     }
// CHECK-NEXT:     cir.yield
// CHECK-NEXT: }

// CHECK:        cir.loop while(cond :  {
// CHECK-NEXT:     %4 = cir.load %2 : cir.ptr <i32>, i32
// CHECK-NEXT:     %5 = cir.cst(10 : i32) : i32
// CHECK-NEXT:     %6 = cir.cmp(lt, %4, %5) : i32, !cir.bool
// CHECK-NEXT:     cir.brcond %6 ^bb1, ^bb2
// CHECK-NEXT:     ^bb1:
// CHECK-NEXT:       cir.yield continue
// CHECK-NEXT:     ^bb2:
// CHECK-NEXT:       cir.yield
// CHECK-NEXT:   }, step :  {
// CHECK-NEXT:     cir.yield
// CHECK-NEXT:   })  {
// CHECK-NEXT:     %4 = cir.load %0 : cir.ptr <i32>, i32
// CHECK-NEXT:     %5 = cir.cst(1 : i32) : i32
// CHECK-NEXT:     %6 = cir.binop(add, %4, %5) : i32
// CHECK-NEXT:     cir.store %6, %0 : i32, cir.ptr <i32>
// CHECK-NEXT:     %7 = cir.cst(true) : !cir.bool
// CHECK-NEXT:     cir.if %7 {
// CHECK-NEXT:       cir.yield continue
// CHECK-NEXT:     }
// CHECK-NEXT:     cir.yield
// CHECK-NEXT:   }

// CHECK:        cir.loop dowhile(cond :  {
// CHECK-NEXT:     %4 = cir.load %2 : cir.ptr <i32>, i32
// CHECK-NEXT:     %5 = cir.cst(10 : i32) : i32
// CHECK-NEXT:     %6 = cir.cmp(lt, %4, %5) : i32, !cir.bool
// CHECK-NEXT:     cir.brcond %6 ^bb1, ^bb2
// CHECK-NEXT:     ^bb1:
// CHECK-NEXT:       cir.yield continue
// CHECK-NEXT:     ^bb2:
// CHECK-NEXT:       cir.yield
// CHECK-NEXT:   }, step :  {
// CHECK-NEXT:     cir.yield
// CHECK-NEXT:   })  {
// CHECK-NEXT:     %4 = cir.load %0 : cir.ptr <i32>, i32
// CHECK-NEXT:     %5 = cir.cst(1 : i32) : i32
// CHECK-NEXT:     %6 = cir.binop(add, %4, %5) : i32
// CHECK-NEXT:     cir.store %6, %0 : i32, cir.ptr <i32>
// CHECK-NEXT:     cir.yield
// CHECK-NEXT:   }

cir.func @l1() {
  cir.scope {
    cir.loop while(cond :  {
      cir.yield continue
    }, step :  {
      cir.yield
    })  {
      cir.yield
    }
  }
  cir.return
}

// CHECK: cir.func @l1
// CHECK-NEXT:  cir.scope {
// CHECK-NEXT:    cir.loop while(cond :  {
// CHECK-NEXT:      cir.yield continue
// CHECK-NEXT:    }, step :  {
// CHECK-NEXT:      cir.yield
// CHECK-NEXT:    })  {
// CHECK-NEXT:      cir.yield
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// CHECK-NEXT:  cir.return
// CHECK-NEXT: }

cir.func @l2() {
  cir.scope {
    cir.loop while(cond :  {
      cir.yield
    }, step :  {
      cir.yield
    })  {
      cir.yield
    }
  }
  cir.return
}

// CHECK: cir.func @l2
// CHECK-NEXT:  cir.scope {
// CHECK-NEXT:    cir.loop while(cond :  {
// CHECK-NEXT:      cir.yield
// CHECK-NEXT:    }, step :  {
// CHECK-NEXT:      cir.yield
// CHECK-NEXT:    })  {
// CHECK-NEXT:      cir.yield
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// CHECK-NEXT:  cir.return
// CHECK-NEXT: }