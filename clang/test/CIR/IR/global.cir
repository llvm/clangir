// RUN: cir-tool %s | FileCheck %s

module {
  cir.global external @a = 3 : i32
  cir.global external @rgb = #cir.const_array<[0 : i8, -23 : i8, 33 : i8] : !cir.array<i8 x 3>>
  cir.global external @b = #cir.const_array<"example\00" : !cir.array<i8 x 8>>
  cir.global external @rgb2 = #cir.const_struct<{0 : i8, 5 : i64, #cir.null : !cir.ptr<i8>}> : !cir.struct<"", i8, i64, !cir.ptr<i8>>
  cir.global "private" constant internal @".str" : !cir.array<i8 x 8> {alignment = 1 : i64}
  cir.global "private" internal @c : i32
  cir.global "private" constant internal @".str2" = #cir.const_array<"example\00" : !cir.array<i8 x 8>> : !cir.array<i8 x 8> {alignment = 1 : i64}
  cir.global external @s = @".str2": !cir.ptr<i8>
  cir.func @use_global() {
    %0 = cir.get_global @a : cir.ptr <i32>
    cir.return
  }
  cir.global external @table = #cir.global_view<@s> : !cir.ptr<i8>
  cir.global external @elt_ptr = #cir.global_view<@rgb, [1]> : !cir.ptr<i8>
  cir.global external @table_of_ptrs = #cir.const_array<[#cir.global_view<@rgb, [1]> : !cir.ptr<i8>] : !cir.array<!cir.ptr<i8> x 1>>

  // Note MLIR requires "private" for global declarations, should get
  // rid of this somehow in favor of clarity?
  cir.global "private" external @_ZTVN10__cxxabiv120__si_class_type_infoE : !cir.ptr<i32>
  cir.global "private" constant external @type_info_A : !cir.ptr<i8>
  cir.global constant external @type_info_name_B = #cir.const_array<"1B\00" : !cir.array<i8 x 3>>

  cir.global external @type_info_B = #cir.typeinfo<<{
    #cir.global_view<@_ZTVN10__cxxabiv120__si_class_type_infoE, [2]> : !cir.ptr<i8>,
    #cir.global_view<@type_info_name_B> : !cir.ptr<i8>,
    #cir.global_view<@type_info_A> : !cir.ptr<i8>}>>
    : !cir.struct<"", !cir.ptr<i8>, !cir.ptr<i8>, !cir.ptr<i8>
  >
}

// CHECK: cir.global external @a = 3 : i32
// CHECK: cir.global external @rgb = #cir.const_array<[0 : i8, -23 : i8, 33 : i8]> : !cir.array<i8 x 3>
// CHECK: cir.global external @b = #cir.const_array<"example\00" : !cir.array<i8 x 8>>
// CHECK: cir.global "private" constant internal @".str" : !cir.array<i8 x 8> {alignment = 1 : i64}
// CHECK: cir.global "private" internal @c : i32
// CHECK: cir.global "private" constant internal @".str2" = #cir.const_array<"example\00" : !cir.array<i8 x 8>> : !cir.array<i8 x 8> {alignment = 1 : i64}
// CHECK: cir.global external @s = @".str2": !cir.ptr<i8>

// CHECK: cir.func @use_global()
// CHECK-NEXT: %0 = cir.get_global @a : cir.ptr <i32>
