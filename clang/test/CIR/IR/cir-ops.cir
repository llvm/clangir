// Test the CIR operations can parse and print correctly (roundtrip)

// RUN: cir-tool %s | cir-tool | FileCheck %s
// XFAIL: *
module  {
  cir.func @foo(%arg0: i32) -> i32 {
    %0 = cir.alloca i32, cir.ptr <i32>, ["x", paraminit]
    cir.store %arg0, %0 : i32, cir.ptr <i32>
    %1 = cir.load %0 : cir.ptr <i32>, i32
    cir.return %1 : i32
  }

  cir.func @f3() -> i32 {
    %0 = cir.alloca i32, cir.ptr <i32>, ["x", cinit]
    %1 = cir.cst(3 : i32) : i32
    cir.store %1, %0 : i32, cir.ptr <i32>
    %2 = cir.load %0 : cir.ptr <i32>, i32
    cir.return %2 : i32
  }

  cir.func @if0(%arg0: i32) -> i32 {
    %0 = cir.alloca i32, cir.ptr <i32>, ["x", cinit] {alignment = 4 : i64}
    %1 = cir.alloca i32, cir.ptr <i32>, ["a", paraminit] {alignment = 4 : i64}
    cir.store %arg0, %1 : i32, cir.ptr <i32>
    %2 = cir.cst(0 : i32) : i32
    cir.store %2, %0 : i32, cir.ptr <i32>
    %3 = cir.load %1 : cir.ptr <i32>, i32
    %4 = cir.cast(int_to_bool, %3 : i32), !cir.bool
    cir.if %4 {
      %6 = cir.cst(3 : i32) : i32
      cir.store %6, %0 : i32, cir.ptr <i32>
    } else {
      %6 = cir.cst(4 : i32) : i32
      cir.store %6, %0 : i32, cir.ptr <i32>
    }
    %5 = cir.load %0 : cir.ptr <i32>, i32
    cir.return %5 : i32
  }

  cir.func @s0() {
    %0 = cir.alloca i32, cir.ptr <i32>, ["x", uninitialized] {alignment = 4 : i64}
    cir.scope {
      %1 = cir.alloca i32, cir.ptr <i32>, ["y", uninitialized] {alignment = 4 : i64}
    }
    cir.return
  }
}

// CHECK: module  {

// CHECK-NEXT:   cir.func @foo(%arg0: i32) -> i32 {
// CHECK-NEXT:     %0 = cir.alloca i32, cir.ptr <i32>, ["x", paraminit]
// CHECK-NEXT:     cir.store %arg0, %0 : i32, cir.ptr <i32>
// CHECK-NEXT:     %1 = cir.load %0 : cir.ptr <i32>, i32
// CHECK-NEXT:     cir.return %1 : i32
// CHECK-NEXT:   }

// CHECK-NEXT:   cir.func @f3() -> i32 {
// CHECK-NEXT:     %0 = cir.alloca i32, cir.ptr <i32>, ["x", cinit]
// CHECK-NEXT:     %1 = cir.cst(3 : i32) : i32
// CHECK-NEXT:     cir.store %1, %0 : i32, cir.ptr <i32>
// CHECK-NEXT:     %2 = cir.load %0 : cir.ptr <i32>, i32
// CHECK-NEXT:     cir.return %2 : i32
// CHECK-NEXT:   }

// CHECK:   @if0(%arg0: i32) -> i32 {
// CHECK:   %4 = cir.cast(int_to_bool, %3 : i32), !cir.bool
// CHECK-NEXT:   cir.if %4 {
// CHECK-NEXT:     %6 = cir.cst(3 : i32) : i32
// CHECK-NEXT:     cir.store %6, %0 : i32, cir.ptr <i32>
// CHECK-NEXT:   } else {
// CHECK-NEXT:     %6 = cir.cst(4 : i32) : i32
// CHECK-NEXT:     cir.store %6, %0 : i32, cir.ptr <i32>
// CHECK-NEXT:   }

// CHECK: cir.func @s0() {
// CHECK-NEXT:     %0 = cir.alloca i32, cir.ptr <i32>, ["x", uninitialized] {alignment = 4 : i64}
// CHECK-NEXT:     cir.scope {
// CHECK-NEXT:       %1 = cir.alloca i32,  cir.ptr <i32>, ["y", uninitialized] {alignment = 4 : i64}
// CHECK-NEXT:     }

// CHECK: }
