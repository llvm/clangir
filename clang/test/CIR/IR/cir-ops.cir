// Test the CIR operations can parse and print correctly (roundtrip)

// RUN: cir-tool %s | cir-tool | FileCheck %s
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>

module  {
  cir.func @foo(%arg0: !s32i) -> !s32i {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["x", init]
    cir.store %arg0, %0 : !s32i, cir.ptr <!s32i>
    %1 = cir.load %0 : cir.ptr <!s32i>, !s32i
    cir.return %1 : !s32i
  }

  cir.func @f3() -> !s32i {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["x", init]
    %1 = cir.const(#cir.int<3> : !s32i) : !s32i
    cir.store %1, %0 : !s32i, cir.ptr <!s32i>
    %2 = cir.load %0 : cir.ptr <!s32i>, !s32i
    cir.return %2 : !s32i
  }

  cir.func @if0(%arg0: !s32i) -> !s32i {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["x", init] {alignment = 4 : i64}
    %1 = cir.alloca !s32i, cir.ptr <!s32i>, ["a", init] {alignment = 4 : i64}
    cir.store %arg0, %1 : !s32i, cir.ptr <!s32i>
    %2 = cir.const(#cir.int<0> : !s32i) : !s32i
    cir.store %2, %0 : !s32i, cir.ptr <!s32i>
    %3 = cir.load %1 : cir.ptr <!s32i>, !s32i
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool
    cir.if %4 {
      %6 = cir.const(#cir.int<3> : !s32i) : !s32i
      cir.store %6, %0 : !s32i, cir.ptr <!s32i>
    } else {
      %6 = cir.const(#cir.int<4> : !s32i) : !s32i
      cir.store %6, %0 : !s32i, cir.ptr <!s32i>
    }
    %5 = cir.load %0 : cir.ptr <!s32i>, !s32i
    cir.return %5 : !s32i
  }

  cir.func @s0() {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["x"] {alignment = 4 : i64}
    cir.scope {
      %1 = cir.alloca !s32i, cir.ptr <!s32i>, ["y"] {alignment = 4 : i64}
    }
    cir.return
  }

  cir.func @os() {
    %0 = cir.alloca !cir.ptr<!s8i>, cir.ptr <!cir.ptr<!s8i>>, ["m", init] {alignment = 8 : i64}
    %3 = cir.load %0 : cir.ptr <!cir.ptr<!s8i>>, !cir.ptr<!s8i>
    %4 = cir.objsize(%3 : <!s8i>, max) -> !u64i
    %5 = cir.objsize(%3 : <!s8i>, min) -> !u64i
    cir.return
  }
}

// CHECK: module  {

// CHECK-NEXT:   cir.func @foo(%arg0: !s32i) -> !s32i {
// CHECK-NEXT:     %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["x", init]
// CHECK-NEXT:     cir.store %arg0, %0 : !s32i, cir.ptr <!s32i>
// CHECK-NEXT:     %1 = cir.load %0 : cir.ptr <!s32i>, !s32i
// CHECK-NEXT:     cir.return %1 : !s32i
// CHECK-NEXT:   }

// CHECK-NEXT:   cir.func @f3() -> !s32i {
// CHECK-NEXT:     %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["x", init]
// CHECK-NEXT:     %1 = cir.const(#cir.int<3> : !s32i) : !s32i
// CHECK-NEXT:     cir.store %1, %0 : !s32i, cir.ptr <!s32i>
// CHECK-NEXT:     %2 = cir.load %0 : cir.ptr <!s32i>, !s32i
// CHECK-NEXT:     cir.return %2 : !s32i
// CHECK-NEXT:   }

// CHECK:   @if0(%arg0: !s32i) -> !s32i {
// CHECK:   %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool
// CHECK-NEXT:   cir.if %4 {
// CHECK-NEXT:     %6 = cir.const(#cir.int<3> : !s32i) : !s32i
// CHECK-NEXT:     cir.store %6, %0 : !s32i, cir.ptr <!s32i>
// CHECK-NEXT:   } else {
// CHECK-NEXT:     %6 = cir.const(#cir.int<4> : !s32i) : !s32i
// CHECK-NEXT:     cir.store %6, %0 : !s32i, cir.ptr <!s32i>
// CHECK-NEXT:   }

// CHECK: cir.func @s0() {
// CHECK-NEXT:     %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["x"] {alignment = 4 : i64}
// CHECK-NEXT:     cir.scope {
// CHECK-NEXT:       %1 = cir.alloca !s32i,  cir.ptr <!s32i>, ["y"] {alignment = 4 : i64}
// CHECK-NEXT:     }

// CHECK: cir.func @os() {
// CHECK-NEXT:   %0 = cir.alloca !cir.ptr<!s8i>, cir.ptr <!cir.ptr<!s8i>>, ["m", init] {alignment = 8 : i64}
// CHECK-NEXT:   %1 = cir.load %0 : cir.ptr <!cir.ptr<!s8i>>, !cir.ptr<!s8i>
// CHECK-NEXT:   %2 = cir.objsize(%1 : <!s8i>, max) -> !u64i
// CHECK-NEXT:   %3 = cir.objsize(%1 : <!s8i>, min) -> !u64i
// CHECK-NEXT:   cir.return
// CHECK-NEXT: }

// CHECK: }
