// Test the CIR operations can parse and print correctly (roundtrip)

// RUN: cir-tool %s | cir-tool | FileCheck %s
module  {
  func.func @foo(%arg0: i32) -> i32 {
    %0 = cir.alloca i32, cir.ptr <i32>, [paraminit]
    cir.store %arg0, %0 : i32, cir.ptr <i32>
    %1 = cir.load %0 : cir.ptr <i32>, i32
    cir.return %1 : i32
  }

  func.func @f3() -> i32 {
    %0 = cir.alloca i32, cir.ptr <i32>, [cinit]
    %1 = cir.cst(3 : i32) : i32
    cir.store %1, %0 : i32, cir.ptr <i32>
    %2 = cir.load %0 lvalue_to_rvalue : cir.ptr <i32>, i32
    cir.return %2 : i32
  }
}

// CHECK: module  {
// CHECK-NEXT:   func.func @foo(%arg0: i32) -> i32 {
// CHECK-NEXT:     %0 = cir.alloca i32, cir.ptr <i32>, [paraminit]
// CHECK-NEXT:     cir.store %arg0, %0 : i32, cir.ptr <i32>
// CHECK-NEXT:     %1 = cir.load %0 : cir.ptr <i32>, i32
// CHECK-NEXT:     cir.return %1 : i32
// CHECK-NEXT:   }

// CHECK-NEXT:   func.func @f3() -> i32 {
// CHECK-NEXT:     %0 = cir.alloca i32, cir.ptr <i32>, [cinit]
// CHECK-NEXT:     %1 = cir.cst(3 : i32) : i32
// CHECK-NEXT:     cir.store %1, %0 : i32, cir.ptr <i32>
// CHECK-NEXT:     %2 = cir.load %0 lvalue_to_rvalue : cir.ptr <i32>, i32
// CHECK-NEXT:     cir.return %2 : i32
// CHECK-NEXT:   }

// CHECK: }
