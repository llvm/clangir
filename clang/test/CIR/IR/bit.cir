// RUN: cir-opt %s | cir-opt | FileCheck %s

!s8i = !cir.int<s, 8>
!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u8i = !cir.int<u, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>

module {
  cir.func @test() {
    %s8 = cir.const #cir.int<1> : !s8i
    %s16 = cir.const #cir.int<1> : !s16i
    %s32 = cir.const #cir.int<1> : !s32i
    %s64 = cir.const #cir.int<1> : !s64i
    %u8 = cir.const #cir.int<1> : !u8i
    %u16 = cir.const #cir.int<1> : !u16i
    %u32 = cir.const #cir.int<1> : !u32i
    %u64 = cir.const #cir.int<1> : !u64i

    %2 = cir.clrsb %s32 : !s32i
    %3 = cir.clrsb %s64 : !s64i

    %4 = cir.clz %u16 zero_poison : !u16i
    %5 = cir.clz %u32 : !u32i
    %6 = cir.clz %u64 zero_poison : !u64i

    %7 = cir.ctz %u16 zero_poison : !u16i
    %8 = cir.ctz %u32 : !u32i
    %9 = cir.ctz %u64 zero_poison : !u64i

    %10 = cir.ffs %s32 : !s32i
    %11 = cir.ffs %s64 : !s64i

    %12 = cir.parity %u32 : !u32i
    %13 = cir.parity %u64 : !u64i

    %14 = cir.popcount %u16 : !u16i
    %15 = cir.popcount %u32 : !u32i
    %16 = cir.popcount %u64 : !u64i

    cir.return
  }
}

//      CHECK: module {
// CHECK-NEXT:   cir.func @test() {
// CHECK-NEXT:     %0 = cir.const #cir.int<1> : !s8i
// CHECK-NEXT:     %1 = cir.const #cir.int<1> : !s16i
// CHECK-NEXT:     %2 = cir.const #cir.int<1> : !s32i
// CHECK-NEXT:     %3 = cir.const #cir.int<1> : !s64i
// CHECK-NEXT:     %4 = cir.const #cir.int<1> : !u8i
// CHECK-NEXT:     %5 = cir.const #cir.int<1> : !u16i
// CHECK-NEXT:     %6 = cir.const #cir.int<1> : !u32i
// CHECK-NEXT:     %7 = cir.const #cir.int<1> : !u64i
// CHECK-NEXT:     %8 = cir.clrsb %2 : !s32i
// CHECK-NEXT:     %9 = cir.clrsb %3 : !s64i
// CHECK-NEXT:     %10 = cir.clz %5 zero_poison : !u16i
// CHECK-NEXT:     %11 = cir.clz %6 : !u32i
// CHECK-NEXT:     %12 = cir.clz %7 zero_poison : !u64i
// CHECK-NEXT:     %13 = cir.ctz %5 zero_poison : !u16i
// CHECK-NEXT:     %14 = cir.ctz %6 : !u32i
// CHECK-NEXT:     %15 = cir.ctz %7 zero_poison : !u64i
// CHECK-NEXT:     %16 = cir.ffs %2 : !s32i
// CHECK-NEXT:     %17 = cir.ffs %3 : !s64i
// CHECK-NEXT:     %18 = cir.parity %6 : !u32i
// CHECK-NEXT:     %19 = cir.parity %7 : !u64i
// CHECK-NEXT:     %20 = cir.popcount %5 : !u16i
// CHECK-NEXT:     %21 = cir.popcount %6 : !u32i
// CHECK-NEXT:     %22 = cir.popcount %7 : !u64i
// CHECK-NEXT:     cir.return
// CHECK-NEXT:   }
// CHECK-NEXT: }
