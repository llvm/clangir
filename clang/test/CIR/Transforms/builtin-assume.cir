// RUN: cir-opt --canonicalize -o %t.cir %s
// RUN: FileCheck --input-file %t.cir %s
// RUN: cir-opt -cir-simplify -o %t.cir %s
// RUN: FileCheck --input-file %t.cir %s

!s32i = !cir.int<s, 32>
module {
  // Make sure canonicalizers don't erase assume builtins.

  cir.func @assume(%arg0: !s32i) {
    %0 = cir.const #cir.int<0> : !s32i
    %1 = cir.cmp(gt, %arg0, %0) : !s32i, !cir.bool
    cir.assume %1 : !cir.bool
    cir.return
  }
  //      CHECK: cir.func @assume(%arg0: !s32i) {
  // CHECK-NEXT:   %0 = cir.const #cir.int<0> : !s32i
  // CHECK-NEXT:   %1 = cir.cmp(gt, %arg0, %0) : !s32i, !cir.bool
  // CHECK-NEXT:   cir.assume %1 : !cir.bool
  // CHECK-NEXT:   cir.return
  // CHECK-NEXT: }

  cir.func @assume_aligned(%arg0: !cir.ptr<!s32i>) -> !cir.ptr<!s32i> {
    %0 = cir.assume.aligned %arg0 : !cir.ptr<!s32i>[alignment 8]
    cir.return %0 : !cir.ptr<!s32i>
  }
  //      CHECK: cir.func @assume_aligned(%arg0: !cir.ptr<!s32i>) -> !cir.ptr<!s32i> {
  // CHECK-NEXT:   %0 = cir.assume.aligned %arg0 : !cir.ptr<!s32i>[alignment 8]
  // CHECK-NEXT:   cir.return %0 : !cir.ptr<!s32i>
  // CHECK-NEXT: }

  cir.func @assume_separate_storage(%arg0: !cir.ptr<!cir.void>, %arg1: !cir.ptr<!cir.void>) {
    cir.assume.separate_storage %arg0, %arg1 : !cir.ptr<!cir.void>
    cir.return
  }
  //      CHECK: cir.func @assume_separate_storage(%arg0: !cir.ptr<!void>, %arg1: !cir.ptr<!void>) {
  // CHECK-NEXT:   cir.assume.separate_storage %arg0, %arg1 : !cir.ptr<!void>
  // CHECK-NEXT:   cir.return
  // CHECK-NEXT: }
}